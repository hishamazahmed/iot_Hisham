
hello2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000114  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000168  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000168  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000198  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006c8  00000000  00000000  000001f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000058a  00000000  00000000  000008bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002ae  00000000  00000000  00000e46  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000010f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000328  00000000  00000000  00001118  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000168  00000000  00000000  00001440  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000015a8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 88 00 	jmp	0x110	; 0x110 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <avr/io.h>
#include <util/delay.h>

int main(void)
{
	DDRD |= 0xFF;
  6c:	81 b3       	in	r24, 0x11	; 17
  6e:	8f ef       	ldi	r24, 0xFF	; 255
  70:	81 bb       	out	0x11, r24	; 17
	while(1){
		for (int i=0; i<8 ; i++)
		{
			PORTD |= (1<<i);
  72:	61 e0       	ldi	r22, 0x01	; 1
  74:	70 e0       	ldi	r23, 0x00	; 0

int main(void)
{
	DDRD |= 0xFF;
	while(1){
		for (int i=0; i<8 ; i++)
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	30 e0       	ldi	r19, 0x00	; 0
		{
			PORTD |= (1<<i);
  7a:	42 b3       	in	r20, 0x12	; 18
  7c:	cb 01       	movw	r24, r22
  7e:	02 2e       	mov	r0, r18
  80:	02 c0       	rjmp	.+4      	; 0x86 <main+0x1a>
  82:	88 0f       	add	r24, r24
  84:	99 1f       	adc	r25, r25
  86:	0a 94       	dec	r0
  88:	e2 f7       	brpl	.-8      	; 0x82 <main+0x16>
  8a:	94 2f       	mov	r25, r20
  8c:	98 2b       	or	r25, r24
  8e:	92 bb       	out	0x12, r25	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  90:	4f ef       	ldi	r20, 0xFF	; 255
  92:	51 ee       	ldi	r21, 0xE1	; 225
  94:	e4 e0       	ldi	r30, 0x04	; 4
  96:	41 50       	subi	r20, 0x01	; 1
  98:	50 40       	sbci	r21, 0x00	; 0
  9a:	e0 40       	sbci	r30, 0x00	; 0
  9c:	e1 f7       	brne	.-8      	; 0x96 <main+0x2a>
  9e:	00 c0       	rjmp	.+0      	; 0xa0 <main+0x34>
  a0:	00 00       	nop
			_delay_ms (100);
			PORTD &=~ (1<<i);
  a2:	92 b3       	in	r25, 0x12	; 18
  a4:	80 95       	com	r24
  a6:	89 23       	and	r24, r25
  a8:	82 bb       	out	0x12, r24	; 18
  aa:	4f ef       	ldi	r20, 0xFF	; 255
  ac:	51 ee       	ldi	r21, 0xE1	; 225
  ae:	84 e0       	ldi	r24, 0x04	; 4
  b0:	41 50       	subi	r20, 0x01	; 1
  b2:	50 40       	sbci	r21, 0x00	; 0
  b4:	80 40       	sbci	r24, 0x00	; 0
  b6:	e1 f7       	brne	.-8      	; 0xb0 <main+0x44>
  b8:	00 c0       	rjmp	.+0      	; 0xba <main+0x4e>
  ba:	00 00       	nop

int main(void)
{
	DDRD |= 0xFF;
	while(1){
		for (int i=0; i<8 ; i++)
  bc:	2f 5f       	subi	r18, 0xFF	; 255
  be:	3f 4f       	sbci	r19, 0xFF	; 255
  c0:	28 30       	cpi	r18, 0x08	; 8
  c2:	31 05       	cpc	r19, r1
  c4:	d1 f6       	brne	.-76     	; 0x7a <main+0xe>
			PORTD |= (1<<i);
			_delay_ms (100);
			PORTD &=~ (1<<i);
			_delay_ms (100);
		}
		PORTD = 0x00;
  c6:	12 ba       	out	0x12, r1	; 18
	
		
		for (int j=7; j>=0;  j--)
  c8:	27 e0       	ldi	r18, 0x07	; 7
  ca:	30 e0       	ldi	r19, 0x00	; 0
		{
			PORTD = (1<<j);
  cc:	cb 01       	movw	r24, r22
  ce:	02 2e       	mov	r0, r18
  d0:	02 c0       	rjmp	.+4      	; 0xd6 <main+0x6a>
  d2:	88 0f       	add	r24, r24
  d4:	99 1f       	adc	r25, r25
  d6:	0a 94       	dec	r0
  d8:	e2 f7       	brpl	.-8      	; 0xd2 <main+0x66>
  da:	82 bb       	out	0x12, r24	; 18
  dc:	ef ef       	ldi	r30, 0xFF	; 255
  de:	41 ee       	ldi	r20, 0xE1	; 225
  e0:	54 e0       	ldi	r21, 0x04	; 4
  e2:	e1 50       	subi	r30, 0x01	; 1
  e4:	40 40       	sbci	r20, 0x00	; 0
  e6:	50 40       	sbci	r21, 0x00	; 0
  e8:	e1 f7       	brne	.-8      	; 0xe2 <main+0x76>
  ea:	00 c0       	rjmp	.+0      	; 0xec <main+0x80>
  ec:	00 00       	nop
			_delay_ms (100);
			PORTD &=~ (1<<j);
  ee:	92 b3       	in	r25, 0x12	; 18
  f0:	80 95       	com	r24
  f2:	89 23       	and	r24, r25
  f4:	82 bb       	out	0x12, r24	; 18
  f6:	8f ef       	ldi	r24, 0xFF	; 255
  f8:	91 ee       	ldi	r25, 0xE1	; 225
  fa:	e4 e0       	ldi	r30, 0x04	; 4
  fc:	81 50       	subi	r24, 0x01	; 1
  fe:	90 40       	sbci	r25, 0x00	; 0
 100:	e0 40       	sbci	r30, 0x00	; 0
 102:	e1 f7       	brne	.-8      	; 0xfc <main+0x90>
 104:	00 c0       	rjmp	.+0      	; 0x106 <main+0x9a>
 106:	00 00       	nop
			_delay_ms (100);
		}
		PORTD = 0x00;
	
		
		for (int j=7; j>=0;  j--)
 108:	21 50       	subi	r18, 0x01	; 1
 10a:	31 09       	sbc	r19, r1
 10c:	f8 f6       	brcc	.-66     	; 0xcc <main+0x60>
 10e:	b3 cf       	rjmp	.-154    	; 0x76 <main+0xa>

00000110 <_exit>:
 110:	f8 94       	cli

00000112 <__stop_program>:
 112:	ff cf       	rjmp	.-2      	; 0x112 <__stop_program>
