
relay LED.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000010a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  0000010a  0000017e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000188  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001b8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000067e  00000000  00000000  00000214  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005a9  00000000  00000000  00000892  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002b2  00000000  00000000  00000e3b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  000010f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000033d  00000000  00000000  00001124  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000ff  00000000  00000000  00001461  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00001560  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e0       	ldi	r30, 0x0A	; 10
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 83 00 	jmp	0x106	; 0x106 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
#define F_CPU 8000000UL//
#include <avr/io.h>
#include <util/delay.h>

int main(void)
{
  82:	cf 93       	push	r28
  84:	df 93       	push	r29
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
  8a:	2a 97       	sbiw	r28, 0x0a	; 10
  8c:	0f b6       	in	r0, 0x3f	; 63
  8e:	f8 94       	cli
  90:	de bf       	out	0x3e, r29	; 62
  92:	0f be       	out	0x3f, r0	; 63
  94:	cd bf       	out	0x3d, r28	; 61
	char hello[]={0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0xff,0x6f};
  96:	8a e0       	ldi	r24, 0x0A	; 10
  98:	e0 e6       	ldi	r30, 0x60	; 96
  9a:	f0 e0       	ldi	r31, 0x00	; 0
  9c:	de 01       	movw	r26, r28
  9e:	11 96       	adiw	r26, 0x01	; 1
  a0:	01 90       	ld	r0, Z+
  a2:	0d 92       	st	X+, r0
  a4:	8a 95       	dec	r24
  a6:	e1 f7       	brne	.-8      	; 0xa0 <main+0x1e>
	DDRC = 0xff;
  a8:	8f ef       	ldi	r24, 0xFF	; 255
  aa:	84 bb       	out	0x14, r24	; 20
	DDRD = 0xff;   
  ac:	81 bb       	out	0x11, r24	; 17
  ae:	9e 01       	movw	r18, r28
  b0:	25 5f       	subi	r18, 0xF5	; 245
  b2:	3f 4f       	sbci	r19, 0xFF	; 255
    {
		for (int u=0;u<=9;u++)
		{			
			for (int i=0;i<=9;i++)
				{					
					PORTD =(1<<PD0);
  b4:	41 e0       	ldi	r20, 0x01	; 1
					PORTC = hello[u];								
					_delay_ms(200);	
					PORTD &=~ (1<<PD0);				
					PORTD =(1<<PD1);
  b6:	92 e0       	ldi	r25, 0x02	; 2
#define F_CPU 8000000UL//
#include <avr/io.h>
#include <util/delay.h>

int main(void)
{
  b8:	de 01       	movw	r26, r28
  ba:	11 96       	adiw	r26, 0x01	; 1
  bc:	21 c0       	rjmp	.+66     	; 0x100 <main+0x7e>
    {
		for (int u=0;u<=9;u++)
		{			
			for (int i=0;i<=9;i++)
				{					
					PORTD =(1<<PD0);
  be:	42 bb       	out	0x12, r20	; 18
					PORTC = hello[u];								
  c0:	8c 91       	ld	r24, X
  c2:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c4:	5f ef       	ldi	r21, 0xFF	; 255
  c6:	61 ee       	ldi	r22, 0xE1	; 225
  c8:	84 e0       	ldi	r24, 0x04	; 4
  ca:	51 50       	subi	r21, 0x01	; 1
  cc:	60 40       	sbci	r22, 0x00	; 0
  ce:	80 40       	sbci	r24, 0x00	; 0
  d0:	e1 f7       	brne	.-8      	; 0xca <main+0x48>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <main+0x52>
  d4:	00 00       	nop
					_delay_ms(200);	
					PORTD &=~ (1<<PD0);				
  d6:	90 98       	cbi	0x12, 0	; 18
					PORTD =(1<<PD1);
  d8:	92 bb       	out	0x12, r25	; 18
					PORTC= hello[i];
  da:	81 91       	ld	r24, Z+
  dc:	85 bb       	out	0x15, r24	; 21
  de:	5f ef       	ldi	r21, 0xFF	; 255
  e0:	61 ee       	ldi	r22, 0xE1	; 225
  e2:	84 e0       	ldi	r24, 0x04	; 4
  e4:	51 50       	subi	r21, 0x01	; 1
  e6:	60 40       	sbci	r22, 0x00	; 0
  e8:	80 40       	sbci	r24, 0x00	; 0
  ea:	e1 f7       	brne	.-8      	; 0xe4 <main+0x62>
  ec:	00 c0       	rjmp	.+0      	; 0xee <main+0x6c>
  ee:	00 00       	nop
					_delay_ms(200);			
					PORTD &=~ (1<<PD1);				
  f0:	91 98       	cbi	0x12, 1	; 18
	DDRD = 0xff;   
    while (1) 
    {
		for (int u=0;u<=9;u++)
		{			
			for (int i=0;i<=9;i++)
  f2:	2e 17       	cp	r18, r30
  f4:	3f 07       	cpc	r19, r31
  f6:	19 f7       	brne	.-58     	; 0xbe <main+0x3c>
  f8:	11 96       	adiw	r26, 0x01	; 1
	char hello[]={0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0xff,0x6f};
	DDRC = 0xff;
	DDRD = 0xff;   
    while (1) 
    {
		for (int u=0;u<=9;u++)
  fa:	2a 17       	cp	r18, r26
  fc:	3b 07       	cpc	r19, r27
  fe:	e1 f2       	breq	.-72     	; 0xb8 <main+0x36>
#define F_CPU 8000000UL//
#include <avr/io.h>
#include <util/delay.h>

int main(void)
{
 100:	fe 01       	movw	r30, r28
 102:	31 96       	adiw	r30, 0x01	; 1
 104:	dc cf       	rjmp	.-72     	; 0xbe <main+0x3c>

00000106 <_exit>:
 106:	f8 94       	cli

00000108 <__stop_program>:
 108:	ff cf       	rjmp	.-2      	; 0x108 <__stop_program>
