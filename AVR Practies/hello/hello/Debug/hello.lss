
hello.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000e0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000134  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000134  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000164  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000659  00000000  00000000  000001c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000588  00000000  00000000  00000819  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000026e  00000000  00000000  00000da1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001010  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000326  00000000  00000000  00001034  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000b4  00000000  00000000  0000135a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000140e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 6e 00 	jmp	0xdc	; 0xdc <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#define F_CPU 16000000UL
#include <avr/io.h>
#include <util/delay.h>
int main(void)
{
	DDRC |= 0xFF;
  6c:	84 b3       	in	r24, 0x14	; 20
  6e:	8f ef       	ldi	r24, 0xFF	; 255
  70:	84 bb       	out	0x14, r24	; 20

	while(1){
		for (int i=0; i<8 ; i++)
		{			
			PORTC |= (1<<i);
  72:	61 e0       	ldi	r22, 0x01	; 1
  74:	70 e0       	ldi	r23, 0x00	; 0
int main(void)
{
	DDRC |= 0xFF;

	while(1){
		for (int i=0; i<8 ; i++)
  76:	80 e0       	ldi	r24, 0x00	; 0
  78:	90 e0       	ldi	r25, 0x00	; 0
		{			
			PORTC |= (1<<i);
  7a:	45 b3       	in	r20, 0x15	; 21
  7c:	9b 01       	movw	r18, r22
  7e:	08 2e       	mov	r0, r24
  80:	02 c0       	rjmp	.+4      	; 0x86 <main+0x1a>
  82:	22 0f       	add	r18, r18
  84:	33 1f       	adc	r19, r19
  86:	0a 94       	dec	r0
  88:	e2 f7       	brpl	.-8      	; 0x82 <main+0x16>
  8a:	24 2b       	or	r18, r20
  8c:	25 bb       	out	0x15, r18	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8e:	2f ef       	ldi	r18, 0xFF	; 255
  90:	31 ee       	ldi	r19, 0xE1	; 225
  92:	44 e0       	ldi	r20, 0x04	; 4
  94:	21 50       	subi	r18, 0x01	; 1
  96:	30 40       	sbci	r19, 0x00	; 0
  98:	40 40       	sbci	r20, 0x00	; 0
  9a:	e1 f7       	brne	.-8      	; 0x94 <main+0x28>
  9c:	00 c0       	rjmp	.+0      	; 0x9e <main+0x32>
  9e:	00 00       	nop
int main(void)
{
	DDRC |= 0xFF;

	while(1){
		for (int i=0; i<8 ; i++)
  a0:	01 96       	adiw	r24, 0x01	; 1
  a2:	88 30       	cpi	r24, 0x08	; 8
  a4:	91 05       	cpc	r25, r1
  a6:	49 f7       	brne	.-46     	; 0x7a <main+0xe>
  a8:	87 e0       	ldi	r24, 0x07	; 7
  aa:	90 e0       	ldi	r25, 0x00	; 0
			
		}
	
		for (int j=7; j>=0; j--)
		{
			PORTC &= ~(1<<j);
  ac:	35 b3       	in	r19, 0x15	; 21
  ae:	ab 01       	movw	r20, r22
  b0:	08 2e       	mov	r0, r24
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <main+0x4c>
  b4:	44 0f       	add	r20, r20
  b6:	55 1f       	adc	r21, r21
  b8:	0a 94       	dec	r0
  ba:	e2 f7       	brpl	.-8      	; 0xb4 <main+0x48>
  bc:	24 2f       	mov	r18, r20
  be:	20 95       	com	r18
  c0:	23 23       	and	r18, r19
  c2:	25 bb       	out	0x15, r18	; 21
  c4:	2f ef       	ldi	r18, 0xFF	; 255
  c6:	31 ee       	ldi	r19, 0xE1	; 225
  c8:	44 e0       	ldi	r20, 0x04	; 4
  ca:	21 50       	subi	r18, 0x01	; 1
  cc:	30 40       	sbci	r19, 0x00	; 0
  ce:	40 40       	sbci	r20, 0x00	; 0
  d0:	e1 f7       	brne	.-8      	; 0xca <main+0x5e>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <main+0x68>
  d4:	00 00       	nop
			PORTC |= (1<<i);
			_delay_ms (100);
			
		}
	
		for (int j=7; j>=0; j--)
  d6:	01 97       	sbiw	r24, 0x01	; 1
  d8:	48 f7       	brcc	.-46     	; 0xac <main+0x40>
  da:	cd cf       	rjmp	.-102    	; 0x76 <main+0xa>

000000dc <_exit>:
  dc:	f8 94       	cli

000000de <__stop_program>:
  de:	ff cf       	rjmp	.-2      	; 0xde <__stop_program>
