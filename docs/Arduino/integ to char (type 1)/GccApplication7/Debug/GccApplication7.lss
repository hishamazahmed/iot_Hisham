
GccApplication7.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001e2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000018e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001e2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000214  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000254  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000092c  00000000  00000000  00000294  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007bd  00000000  00000000  00000bc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000316  00000000  00000000  0000137d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000080  00000000  00000000  00001694  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000400  00000000  00000000  00001714  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001ab  00000000  00000000  00001b14  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001cbf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e8       	ldi	r30, 0x8E	; 142
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 88 00 	call	0x110	; 0x110 <main>
  8e:	0c 94 c5 00 	jmp	0x18a	; 0x18a <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <USART_init>:
	return 0;
}

void USART_init(void){
	
	UBRR0H = (uint8_t)(BAUD_PRESCALLER>>8);
  96:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = (uint8_t)(BAUD_PRESCALLER);
  9a:	83 e3       	ldi	r24, 0x33	; 51
  9c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
  a0:	88 e1       	ldi	r24, 0x18	; 24
  a2:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	UCSR0C = (3<<UCSZ00);
  a6:	86 e0       	ldi	r24, 0x06	; 6
  a8:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
  ac:	08 95       	ret

000000ae <USART_send>:
}


void USART_send( unsigned char data){
	
	while(!(UCSR0A & (1<<UDRE0)));
  ae:	e0 ec       	ldi	r30, 0xC0	; 192
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	90 81       	ld	r25, Z
  b4:	95 ff       	sbrs	r25, 5
  b6:	fd cf       	rjmp	.-6      	; 0xb2 <USART_send+0x4>
	UDR0 = data;
  b8:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  bc:	08 95       	ret

000000be <USART_putstring>:
	utoa (number,buffer,10);
	
	USART_putstring(buffer);
}

void USART_putstring(char* StringPtr){
  be:	cf 93       	push	r28
  c0:	df 93       	push	r29
  c2:	ec 01       	movw	r28, r24
	
	while(*StringPtr != 0x00)
  c4:	88 81       	ld	r24, Y
  c6:	88 23       	and	r24, r24
  c8:	31 f0       	breq	.+12     	; 0xd6 <USART_putstring+0x18>
  ca:	21 96       	adiw	r28, 0x01	; 1
	{
		USART_send(*StringPtr);
  cc:	0e 94 57 00 	call	0xae	; 0xae <USART_send>
	USART_putstring(buffer);
}

void USART_putstring(char* StringPtr){
	
	while(*StringPtr != 0x00)
  d0:	89 91       	ld	r24, Y+
  d2:	81 11       	cpse	r24, r1
  d4:	fb cf       	rjmp	.-10     	; 0xcc <USART_putstring+0xe>
	{
		USART_send(*StringPtr);
		StringPtr++;
	}
	
	USART_send('\r');
  d6:	8d e0       	ldi	r24, 0x0D	; 13
  d8:	0e 94 57 00 	call	0xae	; 0xae <USART_send>

}
  dc:	df 91       	pop	r29
  de:	cf 91       	pop	r28
  e0:	08 95       	ret

000000e2 <loop>:
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
	UCSR0C = (3<<UCSZ00);
}


void loop(int number){
  e2:	cf 93       	push	r28
  e4:	df 93       	push	r29
  e6:	00 d0       	rcall	.+0      	; 0xe8 <loop+0x6>
  e8:	00 d0       	rcall	.+0      	; 0xea <loop+0x8>
  ea:	cd b7       	in	r28, 0x3d	; 61
  ec:	de b7       	in	r29, 0x3e	; 62
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__utoa_ncheck (unsigned int, char *, unsigned char);
	return __utoa_ncheck (__val, __s, __radix);
  ee:	4a e0       	ldi	r20, 0x0A	; 10
  f0:	be 01       	movw	r22, r28
  f2:	6f 5f       	subi	r22, 0xFF	; 255
  f4:	7f 4f       	sbci	r23, 0xFF	; 255
  f6:	0e 94 9b 00 	call	0x136	; 0x136 <__utoa_ncheck>
	char buffer [4];

	utoa (number,buffer,10);
	
	USART_putstring(buffer);
  fa:	ce 01       	movw	r24, r28
  fc:	01 96       	adiw	r24, 0x01	; 1
  fe:	0e 94 5f 00 	call	0xbe	; 0xbe <USART_putstring>
}
 102:	0f 90       	pop	r0
 104:	0f 90       	pop	r0
 106:	0f 90       	pop	r0
 108:	0f 90       	pop	r0
 10a:	df 91       	pop	r29
 10c:	cf 91       	pop	r28
 10e:	08 95       	ret

00000110 <main>:
void loop(int number);

char string[]="Hello World!!";    //String[] is in fact an array but when we put the text between the " " symbols the compiler threats it as a String and automatically puts the null termination character in the end of the text

int main(void){
	USART_init();        //Call the USART initialization code
 110:	0e 94 4b 00 	call	0x96	; 0x96 <USART_init>
	
	while(1){        
		for(int i=50;i>0;i--){
 114:	c2 e3       	ldi	r28, 0x32	; 50
 116:	d0 e0       	ldi	r29, 0x00	; 0
			
			loop(i);
 118:	ce 01       	movw	r24, r28
 11a:	0e 94 71 00 	call	0xe2	; 0xe2 <loop>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 11e:	2f ef       	ldi	r18, 0xFF	; 255
 120:	80 e7       	ldi	r24, 0x70	; 112
 122:	92 e0       	ldi	r25, 0x02	; 2
 124:	21 50       	subi	r18, 0x01	; 1
 126:	80 40       	sbci	r24, 0x00	; 0
 128:	90 40       	sbci	r25, 0x00	; 0
 12a:	e1 f7       	brne	.-8      	; 0x124 <main+0x14>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <main+0x1e>
 12e:	00 00       	nop

int main(void){
	USART_init();        //Call the USART initialization code
	
	while(1){        
		for(int i=50;i>0;i--){
 130:	21 97       	sbiw	r28, 0x01	; 1
 132:	91 f7       	brne	.-28     	; 0x118 <main+0x8>
 134:	ef cf       	rjmp	.-34     	; 0x114 <main+0x4>

00000136 <__utoa_ncheck>:
 136:	bb 27       	eor	r27, r27

00000138 <__utoa_common>:
 138:	fb 01       	movw	r30, r22
 13a:	55 27       	eor	r21, r21
 13c:	aa 27       	eor	r26, r26
 13e:	88 0f       	add	r24, r24
 140:	99 1f       	adc	r25, r25
 142:	aa 1f       	adc	r26, r26
 144:	a4 17       	cp	r26, r20
 146:	10 f0       	brcs	.+4      	; 0x14c <__utoa_common+0x14>
 148:	a4 1b       	sub	r26, r20
 14a:	83 95       	inc	r24
 14c:	50 51       	subi	r21, 0x10	; 16
 14e:	b9 f7       	brne	.-18     	; 0x13e <__utoa_common+0x6>
 150:	a0 5d       	subi	r26, 0xD0	; 208
 152:	aa 33       	cpi	r26, 0x3A	; 58
 154:	08 f0       	brcs	.+2      	; 0x158 <__utoa_common+0x20>
 156:	a9 5d       	subi	r26, 0xD9	; 217
 158:	a1 93       	st	Z+, r26
 15a:	00 97       	sbiw	r24, 0x00	; 0
 15c:	79 f7       	brne	.-34     	; 0x13c <__utoa_common+0x4>
 15e:	b1 11       	cpse	r27, r1
 160:	b1 93       	st	Z+, r27
 162:	11 92       	st	Z+, r1
 164:	cb 01       	movw	r24, r22
 166:	0c 94 b5 00 	jmp	0x16a	; 0x16a <strrev>

0000016a <strrev>:
 16a:	dc 01       	movw	r26, r24
 16c:	fc 01       	movw	r30, r24
 16e:	67 2f       	mov	r22, r23
 170:	71 91       	ld	r23, Z+
 172:	77 23       	and	r23, r23
 174:	e1 f7       	brne	.-8      	; 0x16e <strrev+0x4>
 176:	32 97       	sbiw	r30, 0x02	; 2
 178:	04 c0       	rjmp	.+8      	; 0x182 <strrev+0x18>
 17a:	7c 91       	ld	r23, X
 17c:	6d 93       	st	X+, r22
 17e:	70 83       	st	Z, r23
 180:	62 91       	ld	r22, -Z
 182:	ae 17       	cp	r26, r30
 184:	bf 07       	cpc	r27, r31
 186:	c8 f3       	brcs	.-14     	; 0x17a <strrev+0x10>
 188:	08 95       	ret

0000018a <_exit>:
 18a:	f8 94       	cli

0000018c <__stop_program>:
 18c:	ff cf       	rjmp	.-2      	; 0x18c <__stop_program>
