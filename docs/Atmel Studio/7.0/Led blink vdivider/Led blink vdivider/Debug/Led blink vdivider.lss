
Led blink vdivider.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  000001e2  00000256  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001e2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000262  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000294  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  000002d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000954  00000000  00000000  0000031c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007dc  00000000  00000000  00000c70  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000374  00000000  00000000  0000144c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000090  00000000  00000000  000017c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000430  00000000  00000000  00001850  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000015e  00000000  00000000  00001c80  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001dde  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 ee       	ldi	r30, 0xE2	; 226
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 30       	cpi	r26, 0x0C	; 12
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 94 00 	call	0x128	; 0x128 <main>
  8e:	0c 94 ef 00 	jmp	0x1de	; 0x1de <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <adc_init>:
	
	return 0;
}

void adc_init(void){
	ADCSRA |= ((1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0));    //16Mhz/128 = 125Khz the ADC reference clock
  96:	ea e7       	ldi	r30, 0x7A	; 122
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	80 81       	ld	r24, Z
  9c:	87 60       	ori	r24, 0x07	; 7
  9e:	80 83       	st	Z, r24
	ADMUX |= (1<<REFS0);                //Voltage reference from Avcc (5v)
  a0:	ac e7       	ldi	r26, 0x7C	; 124
  a2:	b0 e0       	ldi	r27, 0x00	; 0
  a4:	8c 91       	ld	r24, X
  a6:	80 64       	ori	r24, 0x40	; 64
  a8:	8c 93       	st	X, r24
	ADCSRA |= (1<<ADEN);                //Turn on ADC
  aa:	80 81       	ld	r24, Z
  ac:	80 68       	ori	r24, 0x80	; 128
  ae:	80 83       	st	Z, r24
	//ADMUX = (1<<ADLAR);
	ADCSRA |= (1<<ADSC);                //Do an initial conversion because this one is the slowest and to ensure that everything is up and running
  b0:	80 81       	ld	r24, Z
  b2:	80 64       	ori	r24, 0x40	; 64
  b4:	80 83       	st	Z, r24
  b6:	08 95       	ret

000000b8 <read_adc>:
}

uint16_t read_adc(uint8_t channel){
	ADMUX &= 0xF0;                    //Clear the older channel that was read
  b8:	ec e7       	ldi	r30, 0x7C	; 124
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	90 81       	ld	r25, Z
  be:	90 7f       	andi	r25, 0xF0	; 240
  c0:	90 83       	st	Z, r25
	ADMUX |= channel;                //Defines the new ADC channel to be read
  c2:	90 81       	ld	r25, Z
  c4:	89 2b       	or	r24, r25
  c6:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);                //Starts a new conversion
  c8:	ea e7       	ldi	r30, 0x7A	; 122
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	80 81       	ld	r24, Z
  ce:	80 64       	ori	r24, 0x40	; 64
  d0:	80 83       	st	Z, r24
	while(ADCSRA & (1<<ADSC));            //Wait until the conversion is done
  d2:	80 81       	ld	r24, Z
  d4:	86 fd       	sbrc	r24, 6
  d6:	fd cf       	rjmp	.-6      	; 0xd2 <read_adc+0x1a>
	return ADC;                    //Returns the ADC value of the chosen channel
  d8:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
  dc:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
}
  e0:	08 95       	ret

000000e2 <USART_init>:

void USART_init(void){
	
	UBRR0H = (uint8_t)(BAUD_PRESCALLER>>8);
  e2:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = (uint8_t)(BAUD_PRESCALLER);
  e6:	83 e3       	ldi	r24, 0x33	; 51
  e8:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
  ec:	88 e1       	ldi	r24, 0x18	; 24
  ee:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	UCSR0C = (3<<UCSZ00);
  f2:	86 e0       	ldi	r24, 0x06	; 6
  f4:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
  f8:	08 95       	ret

000000fa <USART_send>:
}

void USART_send( unsigned char data){	
	while(!(UCSR0A & (1<<UDRE0)));
  fa:	e0 ec       	ldi	r30, 0xC0	; 192
  fc:	f0 e0       	ldi	r31, 0x00	; 0
  fe:	90 81       	ld	r25, Z
 100:	95 ff       	sbrs	r25, 5
 102:	fd cf       	rjmp	.-6      	; 0xfe <USART_send+0x4>
	//printf("value is %u ",data);
	//UDR0 = '1';
	UDR0 = data;	
 104:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 108:	08 95       	ret

0000010a <USART_putstring>:
}

void USART_putstring(char* StringPtr){	
 10a:	cf 93       	push	r28
 10c:	df 93       	push	r29
 10e:	ec 01       	movw	r28, r24
	while(*StringPtr != 0x00){		
 110:	88 81       	ld	r24, Y
 112:	88 23       	and	r24, r24
 114:	31 f0       	breq	.+12     	; 0x122 <USART_putstring+0x18>
 116:	21 96       	adiw	r28, 0x01	; 1
		USART_send(*StringPtr);
 118:	0e 94 7d 00 	call	0xfa	; 0xfa <USART_send>
	//UDR0 = '1';
	UDR0 = data;	
}

void USART_putstring(char* StringPtr){	
	while(*StringPtr != 0x00){		
 11c:	89 91       	ld	r24, Y+
 11e:	81 11       	cpse	r24, r1
 120:	fb cf       	rjmp	.-10     	; 0x118 <USART_putstring+0xe>
		USART_send(*StringPtr);
		StringPtr++;
	}
	
}
 122:	df 91       	pop	r29
 124:	cf 91       	pop	r28
 126:	08 95       	ret

00000128 <main>:
uint16_t read_adc(uint8_t channel);    //Function to read an arbitrary analogic channel/pin
void USART_init(void);            //Function to initialize and configure the USART/serial
void USART_send( unsigned char data);    //Function that sends a char over the serial port
void USART_putstring(char* StringPtr);    //Function that sends a string over the serial port

int main(void){
 128:	cf 93       	push	r28
 12a:	df 93       	push	r29
 12c:	00 d0       	rcall	.+0      	; 0x12e <main+0x6>
 12e:	00 d0       	rcall	.+0      	; 0x130 <main+0x8>
 130:	cd b7       	in	r28, 0x3d	; 61
 132:	de b7       	in	r29, 0x3e	; 62
	adc_init();        //Setup the ADC
 134:	0e 94 4b 00 	call	0x96	; 0x96 <adc_init>
	USART_init();        //Setup the USART
 138:	0e 94 71 00 	call	0xe2	; 0xe2 <USART_init>
	DDRB=0x01;
 13c:	81 e0       	ldi	r24, 0x01	; 1
 13e:	84 b9       	out	0x04, r24	; 4
	while(1){
		uint16_t x= read_adc(1);
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	0e 94 5c 00 	call	0xb8	; 0xb8 <read_adc>
 146:	8c 01       	movw	r16, r24
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__utoa_ncheck (unsigned int, char *, unsigned char);
	return __utoa_ncheck (__val, __s, __radix);
 148:	4a e0       	ldi	r20, 0x0A	; 10
 14a:	be 01       	movw	r22, r28
 14c:	6f 5f       	subi	r22, 0xFF	; 255
 14e:	7f 4f       	sbci	r23, 0xFF	; 255
 150:	0e 94 c5 00 	call	0x18a	; 0x18a <__utoa_ncheck>
		
		char buffer[4];
		utoa(x,buffer,10);
		USART_putstring("value is :");
 154:	80 e0       	ldi	r24, 0x00	; 0
 156:	91 e0       	ldi	r25, 0x01	; 1
 158:	0e 94 85 00 	call	0x10a	; 0x10a <USART_putstring>
		USART_putstring(buffer);
 15c:	ce 01       	movw	r24, r28
 15e:	01 96       	adiw	r24, 0x01	; 1
 160:	0e 94 85 00 	call	0x10a	; 0x10a <USART_putstring>
		
		if (x >= 512){
 164:	01 15       	cp	r16, r1
 166:	12 40       	sbci	r17, 0x02	; 2
 168:	10 f0       	brcs	.+4      	; 0x16e <main+0x46>
			PORTB|=(1<<PB0);
 16a:	28 9a       	sbi	0x05, 0	; 5
 16c:	01 c0       	rjmp	.+2      	; 0x170 <main+0x48>
		}
			else{
				PORTB &=~ (1<<PB0);
 16e:	28 98       	cbi	0x05, 0	; 5
			}
		USART_send(13);
 170:	8d e0       	ldi	r24, 0x0D	; 13
 172:	0e 94 7d 00 	call	0xfa	; 0xfa <USART_send>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 176:	8f ef       	ldi	r24, 0xFF	; 255
 178:	91 ee       	ldi	r25, 0xE1	; 225
 17a:	24 e0       	ldi	r18, 0x04	; 4
 17c:	81 50       	subi	r24, 0x01	; 1
 17e:	90 40       	sbci	r25, 0x00	; 0
 180:	20 40       	sbci	r18, 0x00	; 0
 182:	e1 f7       	brne	.-8      	; 0x17c <main+0x54>
 184:	00 c0       	rjmp	.+0      	; 0x186 <main+0x5e>
 186:	00 00       	nop
		_delay_ms(100);
		
	}
 188:	db cf       	rjmp	.-74     	; 0x140 <main+0x18>

0000018a <__utoa_ncheck>:
 18a:	bb 27       	eor	r27, r27

0000018c <__utoa_common>:
 18c:	fb 01       	movw	r30, r22
 18e:	55 27       	eor	r21, r21
 190:	aa 27       	eor	r26, r26
 192:	88 0f       	add	r24, r24
 194:	99 1f       	adc	r25, r25
 196:	aa 1f       	adc	r26, r26
 198:	a4 17       	cp	r26, r20
 19a:	10 f0       	brcs	.+4      	; 0x1a0 <__utoa_common+0x14>
 19c:	a4 1b       	sub	r26, r20
 19e:	83 95       	inc	r24
 1a0:	50 51       	subi	r21, 0x10	; 16
 1a2:	b9 f7       	brne	.-18     	; 0x192 <__utoa_common+0x6>
 1a4:	a0 5d       	subi	r26, 0xD0	; 208
 1a6:	aa 33       	cpi	r26, 0x3A	; 58
 1a8:	08 f0       	brcs	.+2      	; 0x1ac <__utoa_common+0x20>
 1aa:	a9 5d       	subi	r26, 0xD9	; 217
 1ac:	a1 93       	st	Z+, r26
 1ae:	00 97       	sbiw	r24, 0x00	; 0
 1b0:	79 f7       	brne	.-34     	; 0x190 <__utoa_common+0x4>
 1b2:	b1 11       	cpse	r27, r1
 1b4:	b1 93       	st	Z+, r27
 1b6:	11 92       	st	Z+, r1
 1b8:	cb 01       	movw	r24, r22
 1ba:	0c 94 df 00 	jmp	0x1be	; 0x1be <strrev>

000001be <strrev>:
 1be:	dc 01       	movw	r26, r24
 1c0:	fc 01       	movw	r30, r24
 1c2:	67 2f       	mov	r22, r23
 1c4:	71 91       	ld	r23, Z+
 1c6:	77 23       	and	r23, r23
 1c8:	e1 f7       	brne	.-8      	; 0x1c2 <strrev+0x4>
 1ca:	32 97       	sbiw	r30, 0x02	; 2
 1cc:	04 c0       	rjmp	.+8      	; 0x1d6 <strrev+0x18>
 1ce:	7c 91       	ld	r23, X
 1d0:	6d 93       	st	X+, r22
 1d2:	70 83       	st	Z, r23
 1d4:	62 91       	ld	r22, -Z
 1d6:	ae 17       	cp	r26, r30
 1d8:	bf 07       	cpc	r27, r31
 1da:	c8 f3       	brcs	.-14     	; 0x1ce <strrev+0x10>
 1dc:	08 95       	ret

000001de <_exit>:
 1de:	f8 94       	cli

000001e0 <__stop_program>:
 1e0:	ff cf       	rjmp	.-2      	; 0x1e0 <__stop_program>
