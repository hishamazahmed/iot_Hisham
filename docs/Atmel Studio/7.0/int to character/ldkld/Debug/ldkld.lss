
ldkld.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000184  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001d8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000208  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000248  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000090a  00000000  00000000  00000288  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007ac  00000000  00000000  00000b92  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000316  00000000  00000000  0000133e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000080  00000000  00000000  00001654  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000412  00000000  00000000  000016d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001aa  00000000  00000000  00001ae6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001c90  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 83 00 	call	0x106	; 0x106 <main>
  78:	0c 94 c0 00 	jmp	0x180	; 0x180 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <USART_init>:
	return 0;
}

void USART_init(void)
			{			
				UBRR0H = (uint8_t)(BAUD_PRESCALLER>>8);
  80:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
				UBRR0L = (uint8_t)(BAUD_PRESCALLER);
  84:	83 e3       	ldi	r24, 0x33	; 51
  86:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
				UCSR0B = (1<<RXEN0)|(1<<TXEN0);
  8a:	88 e1       	ldi	r24, 0x18	; 24
  8c:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
				UCSR0C = (3<<UCSZ00);
  90:	86 e0       	ldi	r24, 0x06	; 6
  92:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
  96:	08 95       	ret

00000098 <USART_send>:
			}

void USART_send( unsigned char data)
			{				
				while(!(UCSR0A & (1<<UDRE0)));
  98:	e0 ec       	ldi	r30, 0xC0	; 192
  9a:	f0 e0       	ldi	r31, 0x00	; 0
  9c:	90 81       	ld	r25, Z
  9e:	95 ff       	sbrs	r25, 5
  a0:	fd cf       	rjmp	.-6      	; 0x9c <USART_send+0x4>
				UDR0 = data;				
  a2:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  a6:	08 95       	ret

000000a8 <USART_putstring>:
				utoa (number,buffer,10);				
				USART_putstring(buffer);
			}

void USART_putstring(char* StringPtr)
				{
  a8:	cf 93       	push	r28
  aa:	df 93       	push	r29
  ac:	ec 01       	movw	r28, r24
					
					while(*StringPtr != 0x00){
  ae:	88 81       	ld	r24, Y
  b0:	88 23       	and	r24, r24
  b2:	31 f0       	breq	.+12     	; 0xc0 <USART_putstring+0x18>
  b4:	21 96       	adiw	r28, 0x01	; 1
						USART_send(*StringPtr);
  b6:	0e 94 4c 00 	call	0x98	; 0x98 <USART_send>
			}

void USART_putstring(char* StringPtr)
				{
					
					while(*StringPtr != 0x00){
  ba:	89 91       	ld	r24, Y+
  bc:	81 11       	cpse	r24, r1
  be:	fb cf       	rjmp	.-10     	; 0xb6 <USART_putstring+0xe>
						USART_send(*StringPtr);
					StringPtr++;}
					USART_send('\r');
  c0:	8d e0       	ldi	r24, 0x0D	; 13
  c2:	0e 94 4c 00 	call	0x98	; 0x98 <USART_send>
					
  c6:	df 91       	pop	r29
  c8:	cf 91       	pop	r28
  ca:	08 95       	ret

000000cc <USART_putInt>:
				while(!(UCSR0A & (1<<UDRE0)));
				UDR0 = data;				
			}

void USART_putInt(int number)
			{
  cc:	cf 93       	push	r28
  ce:	df 93       	push	r29
  d0:	cd b7       	in	r28, 0x3d	; 61
  d2:	de b7       	in	r29, 0x3e	; 62
  d4:	61 97       	sbiw	r28, 0x11	; 17
  d6:	0f b6       	in	r0, 0x3f	; 63
  d8:	f8 94       	cli
  da:	de bf       	out	0x3e, r29	; 62
  dc:	0f be       	out	0x3f, r0	; 63
  de:	cd bf       	out	0x3d, r28	; 61
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__utoa_ncheck (unsigned int, char *, unsigned char);
	return __utoa_ncheck (__val, __s, __radix);
  e0:	4a e0       	ldi	r20, 0x0A	; 10
  e2:	be 01       	movw	r22, r28
  e4:	6f 5f       	subi	r22, 0xFF	; 255
  e6:	7f 4f       	sbci	r23, 0xFF	; 255
  e8:	0e 94 96 00 	call	0x12c	; 0x12c <__utoa_ncheck>
				char buffer [sizeof(unsigned int)*8+1];
				utoa (number,buffer,10);				
				USART_putstring(buffer);
  ec:	ce 01       	movw	r24, r28
  ee:	01 96       	adiw	r24, 0x01	; 1
  f0:	0e 94 54 00 	call	0xa8	; 0xa8 <USART_putstring>
			}
  f4:	61 96       	adiw	r28, 0x11	; 17
  f6:	0f b6       	in	r0, 0x3f	; 63
  f8:	f8 94       	cli
  fa:	de bf       	out	0x3e, r29	; 62
  fc:	0f be       	out	0x3f, r0	; 63
  fe:	cd bf       	out	0x3d, r28	; 61
 100:	df 91       	pop	r29
 102:	cf 91       	pop	r28
 104:	08 95       	ret

00000106 <main>:
	void USART_send( unsigned char data);
	void USART_putstring(char* StringPtr);
	void USART_putInt(int number);
	int main(void)
	{
	USART_init();        //Call the USART initialization code
 106:	0e 94 40 00 	call	0x80	; 0x80 <USART_init>
	
	while(1){        //Infinite loop
		//USART_putstring(String);    //Pass the string to the USART_putstring function and sends it over the serial
		for(int i=100;i>0;i--){
 10a:	c4 e6       	ldi	r28, 0x64	; 100
 10c:	d0 e0       	ldi	r29, 0x00	; 0
			USART_putInt(i);
 10e:	ce 01       	movw	r24, r28
 110:	0e 94 66 00 	call	0xcc	; 0xcc <USART_putInt>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 114:	2f ef       	ldi	r18, 0xFF	; 255
 116:	80 e7       	ldi	r24, 0x70	; 112
 118:	92 e0       	ldi	r25, 0x02	; 2
 11a:	21 50       	subi	r18, 0x01	; 1
 11c:	80 40       	sbci	r24, 0x00	; 0
 11e:	90 40       	sbci	r25, 0x00	; 0
 120:	e1 f7       	brne	.-8      	; 0x11a <main+0x14>
 122:	00 c0       	rjmp	.+0      	; 0x124 <main+0x1e>
 124:	00 00       	nop
	{
	USART_init();        //Call the USART initialization code
	
	while(1){        //Infinite loop
		//USART_putstring(String);    //Pass the string to the USART_putstring function and sends it over the serial
		for(int i=100;i>0;i--){
 126:	21 97       	sbiw	r28, 0x01	; 1
 128:	91 f7       	brne	.-28     	; 0x10e <main+0x8>
 12a:	ef cf       	rjmp	.-34     	; 0x10a <main+0x4>

0000012c <__utoa_ncheck>:
 12c:	bb 27       	eor	r27, r27

0000012e <__utoa_common>:
 12e:	fb 01       	movw	r30, r22
 130:	55 27       	eor	r21, r21
 132:	aa 27       	eor	r26, r26
 134:	88 0f       	add	r24, r24
 136:	99 1f       	adc	r25, r25
 138:	aa 1f       	adc	r26, r26
 13a:	a4 17       	cp	r26, r20
 13c:	10 f0       	brcs	.+4      	; 0x142 <__utoa_common+0x14>
 13e:	a4 1b       	sub	r26, r20
 140:	83 95       	inc	r24
 142:	50 51       	subi	r21, 0x10	; 16
 144:	b9 f7       	brne	.-18     	; 0x134 <__utoa_common+0x6>
 146:	a0 5d       	subi	r26, 0xD0	; 208
 148:	aa 33       	cpi	r26, 0x3A	; 58
 14a:	08 f0       	brcs	.+2      	; 0x14e <__utoa_common+0x20>
 14c:	a9 5d       	subi	r26, 0xD9	; 217
 14e:	a1 93       	st	Z+, r26
 150:	00 97       	sbiw	r24, 0x00	; 0
 152:	79 f7       	brne	.-34     	; 0x132 <__utoa_common+0x4>
 154:	b1 11       	cpse	r27, r1
 156:	b1 93       	st	Z+, r27
 158:	11 92       	st	Z+, r1
 15a:	cb 01       	movw	r24, r22
 15c:	0c 94 b0 00 	jmp	0x160	; 0x160 <strrev>

00000160 <strrev>:
 160:	dc 01       	movw	r26, r24
 162:	fc 01       	movw	r30, r24
 164:	67 2f       	mov	r22, r23
 166:	71 91       	ld	r23, Z+
 168:	77 23       	and	r23, r23
 16a:	e1 f7       	brne	.-8      	; 0x164 <strrev+0x4>
 16c:	32 97       	sbiw	r30, 0x02	; 2
 16e:	04 c0       	rjmp	.+8      	; 0x178 <strrev+0x18>
 170:	7c 91       	ld	r23, X
 172:	6d 93       	st	X+, r22
 174:	70 83       	st	Z, r23
 176:	62 91       	ld	r22, -Z
 178:	ae 17       	cp	r26, r30
 17a:	bf 07       	cpc	r27, r31
 17c:	c8 f3       	brcs	.-14     	; 0x170 <strrev+0x10>
 17e:	08 95       	ret

00000180 <_exit>:
 180:	f8 94       	cli

00000182 <__stop_program>:
 182:	ff cf       	rjmp	.-2      	; 0x182 <__stop_program>
