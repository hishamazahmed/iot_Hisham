
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000098  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000ec  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000011c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000158  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000056e  00000000  00000000  00000178  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000004f9  00000000  00000000  000006e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000020a  00000000  00000000  00000bdf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000dec  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002e2  00000000  00000000  00000e10  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  000010f2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 4a 00 	jmp	0x94	; 0x94 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:

int main(void)

{

	DDRD=0b11111000; // set the first 3 pins of PORTD to be inputs to read from the push buttons
  6c:	88 ef       	ldi	r24, 0xF8	; 248
  6e:	81 bb       	out	0x11, r24	; 17

	DDRB=0b11111111; // ensure that Pin3 in POrt B is output as this is the OC0 pin that wll produce the PWM.
  70:	8f ef       	ldi	r24, 0xFF	; 255
  72:	87 bb       	out	0x17, r24	; 23

	PORTD=0b00000000; // Initialize PORTD to zeros
  74:	12 ba       	out	0x12, r1	; 18

	TCCR0=0b01110101; //Configure TCCR0 as explained in the article
  76:	95 e7       	ldi	r25, 0x75	; 117
  78:	93 bf       	out	0x33, r25	; 51

	TIMSK=0b00000000;
  7a:	19 be       	out	0x39, r1	; 57

	OCR0=255; // Set OCR0 to 255 so that the duty cycle is initially 0 and the motor is not rotating
  7c:	8c bf       	out	0x3c, r24	; 60

		if (get_bit(PIND,0)==1)

		{

			OCR0=178; //If button 1 is pressed, set OCR0=178 (duty cycle=10%).
  7e:	82 eb       	ldi	r24, 0xB2	; 178

		if (get_bit(PIND,1)==1)

		{

			OCR0=102; //If button 2 is pressed, set OCR0=102 (duty cycle=60%).
  80:	96 e6       	ldi	r25, 0x66	; 102

		if (get_bit(PIND,2)==1)

		{

			OCR0=25; //If button 3 is pressed, set OCR0=25 (duty cycle=90%).
  82:	29 e1       	ldi	r18, 0x19	; 25

	while(1)

	{

		if (get_bit(PIND,0)==1)
  84:	80 99       	sbic	0x10, 0	; 16

		{

			OCR0=178; //If button 1 is pressed, set OCR0=178 (duty cycle=10%).
  86:	8c bf       	out	0x3c, r24	; 60

		}

		if (get_bit(PIND,1)==1)
  88:	81 99       	sbic	0x10, 1	; 16

		{

			OCR0=102; //If button 2 is pressed, set OCR0=102 (duty cycle=60%).
  8a:	9c bf       	out	0x3c, r25	; 60

		}

		if (get_bit(PIND,2)==1)
  8c:	82 9b       	sbis	0x10, 2	; 16
  8e:	fa cf       	rjmp	.-12     	; 0x84 <main+0x18>

		{

			OCR0=25; //If button 3 is pressed, set OCR0=25 (duty cycle=90%).
  90:	2c bf       	out	0x3c, r18	; 60
  92:	f8 cf       	rjmp	.-16     	; 0x84 <main+0x18>

00000094 <_exit>:
  94:	f8 94       	cli

00000096 <__stop_program>:
  96:	ff cf       	rjmp	.-2      	; 0x96 <__stop_program>
