
MotorL293.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000560  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004ec  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  00800100  00800100  00000560  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000560  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000590  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f8  00000000  00000000  000005d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000015dd  00000000  00000000  000006c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a80  00000000  00000000  00001ca5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000993  00000000  00000000  00002725  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001ec  00000000  00000000  000030b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000795  00000000  00000000  000032a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000889  00000000  00000000  00003a39  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  000042c2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__ctors_end>
   4:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
   8:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
   c:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  10:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  14:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  18:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  1c:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  20:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  24:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  28:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  2c:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  30:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  34:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  38:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  3c:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  40:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__vector_16>
  44:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  48:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  4c:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  50:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  54:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  58:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  5c:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  60:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  64:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	00 00       	nop
  6a:	00 08       	sbc	r0, r0
  6c:	00 02       	muls	r16, r16
  6e:	01 00       	.word	0x0001	; ????
  70:	00 03       	mulsu	r16, r16
  72:	04 07       	cpc	r16, r20
	...

0000007c <digital_pin_to_bit_mask_PGM>:
  7c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
  8c:	04 08 10 20                                         ... 

00000090 <digital_pin_to_port_PGM>:
  90:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
  a0:	03 03 03 03                                         ....

000000a4 <port_to_output_PGM>:
  a4:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000ae <port_to_mode_PGM>:
  ae:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000b8 <__ctors_end>:
  b8:	11 24       	eor	r1, r1
  ba:	1f be       	out	0x3f, r1	; 63
  bc:	cf ef       	ldi	r28, 0xFF	; 255
  be:	d8 e0       	ldi	r29, 0x08	; 8
  c0:	de bf       	out	0x3e, r29	; 62
  c2:	cd bf       	out	0x3d, r28	; 61

000000c4 <__do_clear_bss>:
  c4:	21 e0       	ldi	r18, 0x01	; 1
  c6:	a0 e0       	ldi	r26, 0x00	; 0
  c8:	b1 e0       	ldi	r27, 0x01	; 1
  ca:	01 c0       	rjmp	.+2      	; 0xce <.do_clear_bss_start>

000000cc <.do_clear_bss_loop>:
  cc:	1d 92       	st	X+, r1

000000ce <.do_clear_bss_start>:
  ce:	a9 30       	cpi	r26, 0x09	; 9
  d0:	b2 07       	cpc	r27, r18
  d2:	e1 f7       	brne	.-8      	; 0xcc <.do_clear_bss_loop>
  d4:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <main>
  d8:	0c 94 74 02 	jmp	0x4e8	; 0x4e8 <_exit>

000000dc <__bad_interrupt>:
  dc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e0 <setup>:

//This will run only one time.
void setup(){
 
    //Set pins as outputs
    pinMode(motorPin1, OUTPUT);
  e0:	61 e0       	ldi	r22, 0x01	; 1
  e2:	85 e0       	ldi	r24, 0x05	; 5
  e4:	0e 94 08 02 	call	0x410	; 0x410 <pinMode>
    pinMode(motorPin2, OUTPUT);
  e8:	61 e0       	ldi	r22, 0x01	; 1
  ea:	86 e0       	ldi	r24, 0x06	; 6
  ec:	0e 94 08 02 	call	0x410	; 0x410 <pinMode>
    pinMode(motorPin3, OUTPUT);
  f0:	61 e0       	ldi	r22, 0x01	; 1
  f2:	8a e0       	ldi	r24, 0x0A	; 10
  f4:	0e 94 08 02 	call	0x410	; 0x410 <pinMode>
    pinMode(motorPin4, OUTPUT);
  f8:	61 e0       	ldi	r22, 0x01	; 1
  fa:	89 e0       	ldi	r24, 0x09	; 9
  fc:	0e 94 08 02 	call	0x410	; 0x410 <pinMode>
    
    //Motor Control - Motor A: motorPin1,motorpin2 & Motor B: motorpin3,motorpin4

    //This code  will turn Motor A clockwise for 2 sec.
    digitalWrite(motorPin1, HIGH);
 100:	61 e0       	ldi	r22, 0x01	; 1
 102:	85 e0       	ldi	r24, 0x05	; 5
 104:	0e 94 44 02 	call	0x488	; 0x488 <digitalWrite>
    digitalWrite(motorPin2, LOW);
 108:	60 e0       	ldi	r22, 0x00	; 0
 10a:	86 e0       	ldi	r24, 0x06	; 6
 10c:	0e 94 44 02 	call	0x488	; 0x488 <digitalWrite>
    digitalWrite(motorPin3, LOW);
 110:	60 e0       	ldi	r22, 0x00	; 0
 112:	8a e0       	ldi	r24, 0x0A	; 10
 114:	0e 94 44 02 	call	0x488	; 0x488 <digitalWrite>
    digitalWrite(motorPin4, LOW);
 118:	60 e0       	ldi	r22, 0x00	; 0
 11a:	89 e0       	ldi	r24, 0x09	; 9
 11c:	0e 94 44 02 	call	0x488	; 0x488 <digitalWrite>
    delay(2000); 
 120:	60 ed       	ldi	r22, 0xD0	; 208
 122:	77 e0       	ldi	r23, 0x07	; 7
 124:	80 e0       	ldi	r24, 0x00	; 0
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	0e 94 68 01 	call	0x2d0	; 0x2d0 <delay>
    //This code will turn Motor A counter-clockwise for 2 sec.
    digitalWrite(motorPin1, LOW);
 12c:	60 e0       	ldi	r22, 0x00	; 0
 12e:	85 e0       	ldi	r24, 0x05	; 5
 130:	0e 94 44 02 	call	0x488	; 0x488 <digitalWrite>
    digitalWrite(motorPin2, HIGH);
 134:	61 e0       	ldi	r22, 0x01	; 1
 136:	86 e0       	ldi	r24, 0x06	; 6
 138:	0e 94 44 02 	call	0x488	; 0x488 <digitalWrite>
    digitalWrite(motorPin3, LOW);
 13c:	60 e0       	ldi	r22, 0x00	; 0
 13e:	8a e0       	ldi	r24, 0x0A	; 10
 140:	0e 94 44 02 	call	0x488	; 0x488 <digitalWrite>
    digitalWrite(motorPin4, LOW);
 144:	60 e0       	ldi	r22, 0x00	; 0
 146:	89 e0       	ldi	r24, 0x09	; 9
 148:	0e 94 44 02 	call	0x488	; 0x488 <digitalWrite>
    delay(2000);
 14c:	60 ed       	ldi	r22, 0xD0	; 208
 14e:	77 e0       	ldi	r23, 0x07	; 7
 150:	80 e0       	ldi	r24, 0x00	; 0
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	0e 94 68 01 	call	0x2d0	; 0x2d0 <delay>
    
    //This code will turn Motor B clockwise for 2 sec.
    digitalWrite(motorPin1, LOW);
 158:	60 e0       	ldi	r22, 0x00	; 0
 15a:	85 e0       	ldi	r24, 0x05	; 5
 15c:	0e 94 44 02 	call	0x488	; 0x488 <digitalWrite>
    digitalWrite(motorPin2, LOW);
 160:	60 e0       	ldi	r22, 0x00	; 0
 162:	86 e0       	ldi	r24, 0x06	; 6
 164:	0e 94 44 02 	call	0x488	; 0x488 <digitalWrite>
    digitalWrite(motorPin3, HIGH);
 168:	61 e0       	ldi	r22, 0x01	; 1
 16a:	8a e0       	ldi	r24, 0x0A	; 10
 16c:	0e 94 44 02 	call	0x488	; 0x488 <digitalWrite>
    digitalWrite(motorPin4, LOW);
 170:	60 e0       	ldi	r22, 0x00	; 0
 172:	89 e0       	ldi	r24, 0x09	; 9
 174:	0e 94 44 02 	call	0x488	; 0x488 <digitalWrite>
    delay(2000); 
 178:	60 ed       	ldi	r22, 0xD0	; 208
 17a:	77 e0       	ldi	r23, 0x07	; 7
 17c:	80 e0       	ldi	r24, 0x00	; 0
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	0e 94 68 01 	call	0x2d0	; 0x2d0 <delay>
    //This code will turn Motor B counter-clockwise for 2 sec.
    digitalWrite(motorPin1, LOW);
 184:	60 e0       	ldi	r22, 0x00	; 0
 186:	85 e0       	ldi	r24, 0x05	; 5
 188:	0e 94 44 02 	call	0x488	; 0x488 <digitalWrite>
    digitalWrite(motorPin2, LOW);
 18c:	60 e0       	ldi	r22, 0x00	; 0
 18e:	86 e0       	ldi	r24, 0x06	; 6
 190:	0e 94 44 02 	call	0x488	; 0x488 <digitalWrite>
    digitalWrite(motorPin3, LOW);
 194:	60 e0       	ldi	r22, 0x00	; 0
 196:	8a e0       	ldi	r24, 0x0A	; 10
 198:	0e 94 44 02 	call	0x488	; 0x488 <digitalWrite>
    digitalWrite(motorPin4, HIGH);
 19c:	61 e0       	ldi	r22, 0x01	; 1
 19e:	89 e0       	ldi	r24, 0x09	; 9
 1a0:	0e 94 44 02 	call	0x488	; 0x488 <digitalWrite>
    delay(2000);    
 1a4:	60 ed       	ldi	r22, 0xD0	; 208
 1a6:	77 e0       	ldi	r23, 0x07	; 7
 1a8:	80 e0       	ldi	r24, 0x00	; 0
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	0e 94 68 01 	call	0x2d0	; 0x2d0 <delay>
    
    //And this code will stop motors
    digitalWrite(motorPin1, LOW);
 1b0:	60 e0       	ldi	r22, 0x00	; 0
 1b2:	85 e0       	ldi	r24, 0x05	; 5
 1b4:	0e 94 44 02 	call	0x488	; 0x488 <digitalWrite>
    digitalWrite(motorPin2, LOW);
 1b8:	60 e0       	ldi	r22, 0x00	; 0
 1ba:	86 e0       	ldi	r24, 0x06	; 6
 1bc:	0e 94 44 02 	call	0x488	; 0x488 <digitalWrite>
    digitalWrite(motorPin3, LOW);
 1c0:	60 e0       	ldi	r22, 0x00	; 0
 1c2:	8a e0       	ldi	r24, 0x0A	; 10
 1c4:	0e 94 44 02 	call	0x488	; 0x488 <digitalWrite>
    digitalWrite(motorPin4, LOW);
 1c8:	60 e0       	ldi	r22, 0x00	; 0
 1ca:	89 e0       	ldi	r24, 0x09	; 9
 1cc:	0c 94 44 02 	jmp	0x488	; 0x488 <digitalWrite>

000001d0 <loop>:
  
}


void loop(){
 1d0:	08 95       	ret

000001d2 <initVariant>:
 1d2:	08 95       	ret

000001d4 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
 1d4:	0e 94 a4 01 	call	0x348	; 0x348 <init>

	initVariant();
 1d8:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
 1dc:	0e 94 70 00 	call	0xe0	; 0xe0 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
 1e0:	c0 e0       	ldi	r28, 0x00	; 0
 1e2:	d0 e0       	ldi	r29, 0x00	; 0
#endif
	
	setup();
    
	for (;;) {
		loop();
 1e4:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <loop>
		if (serialEventRun) serialEventRun();
 1e8:	20 97       	sbiw	r28, 0x00	; 0
 1ea:	e1 f3       	breq	.-8      	; 0x1e4 <main+0x10>
 1ec:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 1f0:	f9 cf       	rjmp	.-14     	; 0x1e4 <main+0x10>

000001f2 <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
 1f2:	1f 92       	push	r1
 1f4:	0f 92       	push	r0
 1f6:	0f b6       	in	r0, 0x3f	; 63
 1f8:	0f 92       	push	r0
 1fa:	11 24       	eor	r1, r1
 1fc:	2f 93       	push	r18
 1fe:	3f 93       	push	r19
 200:	8f 93       	push	r24
 202:	9f 93       	push	r25
 204:	af 93       	push	r26
 206:	bf 93       	push	r27
 208:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <timer0_millis>
 20c:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <timer0_millis+0x1>
 210:	a0 91 03 01 	lds	r26, 0x0103	; 0x800103 <timer0_millis+0x2>
 214:	b0 91 04 01 	lds	r27, 0x0104	; 0x800104 <timer0_millis+0x3>
 218:	30 91 00 01 	lds	r19, 0x0100	; 0x800100 <_edata>
 21c:	23 e0       	ldi	r18, 0x03	; 3
 21e:	23 0f       	add	r18, r19
 220:	2d 37       	cpi	r18, 0x7D	; 125
 222:	20 f4       	brcc	.+8      	; 0x22c <__vector_16+0x3a>
 224:	01 96       	adiw	r24, 0x01	; 1
 226:	a1 1d       	adc	r26, r1
 228:	b1 1d       	adc	r27, r1
 22a:	05 c0       	rjmp	.+10     	; 0x236 <__vector_16+0x44>
 22c:	26 e8       	ldi	r18, 0x86	; 134
 22e:	23 0f       	add	r18, r19
 230:	02 96       	adiw	r24, 0x02	; 2
 232:	a1 1d       	adc	r26, r1
 234:	b1 1d       	adc	r27, r1
 236:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <_edata>
 23a:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <timer0_millis>
 23e:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <timer0_millis+0x1>
 242:	a0 93 03 01 	sts	0x0103, r26	; 0x800103 <timer0_millis+0x2>
 246:	b0 93 04 01 	sts	0x0104, r27	; 0x800104 <timer0_millis+0x3>
 24a:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <timer0_overflow_count>
 24e:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <timer0_overflow_count+0x1>
 252:	a0 91 07 01 	lds	r26, 0x0107	; 0x800107 <timer0_overflow_count+0x2>
 256:	b0 91 08 01 	lds	r27, 0x0108	; 0x800108 <timer0_overflow_count+0x3>
 25a:	01 96       	adiw	r24, 0x01	; 1
 25c:	a1 1d       	adc	r26, r1
 25e:	b1 1d       	adc	r27, r1
 260:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <timer0_overflow_count>
 264:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <timer0_overflow_count+0x1>
 268:	a0 93 07 01 	sts	0x0107, r26	; 0x800107 <timer0_overflow_count+0x2>
 26c:	b0 93 08 01 	sts	0x0108, r27	; 0x800108 <timer0_overflow_count+0x3>
 270:	bf 91       	pop	r27
 272:	af 91       	pop	r26
 274:	9f 91       	pop	r25
 276:	8f 91       	pop	r24
 278:	3f 91       	pop	r19
 27a:	2f 91       	pop	r18
 27c:	0f 90       	pop	r0
 27e:	0f be       	out	0x3f, r0	; 63
 280:	0f 90       	pop	r0
 282:	1f 90       	pop	r1
 284:	18 95       	reti

00000286 <micros>:
 286:	3f b7       	in	r19, 0x3f	; 63
 288:	f8 94       	cli
 28a:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <timer0_overflow_count>
 28e:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <timer0_overflow_count+0x1>
 292:	a0 91 07 01 	lds	r26, 0x0107	; 0x800107 <timer0_overflow_count+0x2>
 296:	b0 91 08 01 	lds	r27, 0x0108	; 0x800108 <timer0_overflow_count+0x3>
 29a:	26 b5       	in	r18, 0x26	; 38
 29c:	a8 9b       	sbis	0x15, 0	; 21
 29e:	05 c0       	rjmp	.+10     	; 0x2aa <micros+0x24>
 2a0:	2f 3f       	cpi	r18, 0xFF	; 255
 2a2:	19 f0       	breq	.+6      	; 0x2aa <micros+0x24>
 2a4:	01 96       	adiw	r24, 0x01	; 1
 2a6:	a1 1d       	adc	r26, r1
 2a8:	b1 1d       	adc	r27, r1
 2aa:	3f bf       	out	0x3f, r19	; 63
 2ac:	ba 2f       	mov	r27, r26
 2ae:	a9 2f       	mov	r26, r25
 2b0:	98 2f       	mov	r25, r24
 2b2:	88 27       	eor	r24, r24
 2b4:	82 0f       	add	r24, r18
 2b6:	91 1d       	adc	r25, r1
 2b8:	a1 1d       	adc	r26, r1
 2ba:	b1 1d       	adc	r27, r1
 2bc:	bc 01       	movw	r22, r24
 2be:	cd 01       	movw	r24, r26
 2c0:	42 e0       	ldi	r20, 0x02	; 2
 2c2:	66 0f       	add	r22, r22
 2c4:	77 1f       	adc	r23, r23
 2c6:	88 1f       	adc	r24, r24
 2c8:	99 1f       	adc	r25, r25
 2ca:	4a 95       	dec	r20
 2cc:	d1 f7       	brne	.-12     	; 0x2c2 <micros+0x3c>
 2ce:	08 95       	ret

000002d0 <delay>:
 2d0:	8f 92       	push	r8
 2d2:	9f 92       	push	r9
 2d4:	af 92       	push	r10
 2d6:	bf 92       	push	r11
 2d8:	cf 92       	push	r12
 2da:	df 92       	push	r13
 2dc:	ef 92       	push	r14
 2de:	ff 92       	push	r15
 2e0:	6b 01       	movw	r12, r22
 2e2:	7c 01       	movw	r14, r24
 2e4:	0e 94 43 01 	call	0x286	; 0x286 <micros>
 2e8:	4b 01       	movw	r8, r22
 2ea:	5c 01       	movw	r10, r24
 2ec:	c1 14       	cp	r12, r1
 2ee:	d1 04       	cpc	r13, r1
 2f0:	e1 04       	cpc	r14, r1
 2f2:	f1 04       	cpc	r15, r1
 2f4:	01 f1       	breq	.+64     	; 0x336 <delay+0x66>
 2f6:	0e 94 73 02 	call	0x4e6	; 0x4e6 <yield>
 2fa:	0e 94 43 01 	call	0x286	; 0x286 <micros>
 2fe:	dc 01       	movw	r26, r24
 300:	cb 01       	movw	r24, r22
 302:	88 19       	sub	r24, r8
 304:	99 09       	sbc	r25, r9
 306:	aa 09       	sbc	r26, r10
 308:	bb 09       	sbc	r27, r11
 30a:	88 3e       	cpi	r24, 0xE8	; 232
 30c:	93 40       	sbci	r25, 0x03	; 3
 30e:	a1 05       	cpc	r26, r1
 310:	b1 05       	cpc	r27, r1
 312:	60 f3       	brcs	.-40     	; 0x2ec <delay+0x1c>
 314:	21 e0       	ldi	r18, 0x01	; 1
 316:	c2 1a       	sub	r12, r18
 318:	d1 08       	sbc	r13, r1
 31a:	e1 08       	sbc	r14, r1
 31c:	f1 08       	sbc	r15, r1
 31e:	88 ee       	ldi	r24, 0xE8	; 232
 320:	88 0e       	add	r8, r24
 322:	83 e0       	ldi	r24, 0x03	; 3
 324:	98 1e       	adc	r9, r24
 326:	a1 1c       	adc	r10, r1
 328:	b1 1c       	adc	r11, r1
 32a:	c1 14       	cp	r12, r1
 32c:	d1 04       	cpc	r13, r1
 32e:	e1 04       	cpc	r14, r1
 330:	f1 04       	cpc	r15, r1
 332:	19 f7       	brne	.-58     	; 0x2fa <delay+0x2a>
 334:	db cf       	rjmp	.-74     	; 0x2ec <delay+0x1c>
 336:	ff 90       	pop	r15
 338:	ef 90       	pop	r14
 33a:	df 90       	pop	r13
 33c:	cf 90       	pop	r12
 33e:	bf 90       	pop	r11
 340:	af 90       	pop	r10
 342:	9f 90       	pop	r9
 344:	8f 90       	pop	r8
 346:	08 95       	ret

00000348 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 348:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 34a:	84 b5       	in	r24, 0x24	; 36
 34c:	82 60       	ori	r24, 0x02	; 2
 34e:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 350:	84 b5       	in	r24, 0x24	; 36
 352:	81 60       	ori	r24, 0x01	; 1
 354:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 356:	85 b5       	in	r24, 0x25	; 37
 358:	82 60       	ori	r24, 0x02	; 2
 35a:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 35c:	85 b5       	in	r24, 0x25	; 37
 35e:	81 60       	ori	r24, 0x01	; 1
 360:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 362:	ee e6       	ldi	r30, 0x6E	; 110
 364:	f0 e0       	ldi	r31, 0x00	; 0
 366:	80 81       	ld	r24, Z
 368:	81 60       	ori	r24, 0x01	; 1
 36a:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 36c:	e1 e8       	ldi	r30, 0x81	; 129
 36e:	f0 e0       	ldi	r31, 0x00	; 0
 370:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 372:	80 81       	ld	r24, Z
 374:	82 60       	ori	r24, 0x02	; 2
 376:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 378:	80 81       	ld	r24, Z
 37a:	81 60       	ori	r24, 0x01	; 1
 37c:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 37e:	e0 e8       	ldi	r30, 0x80	; 128
 380:	f0 e0       	ldi	r31, 0x00	; 0
 382:	80 81       	ld	r24, Z
 384:	81 60       	ori	r24, 0x01	; 1
 386:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 388:	e1 eb       	ldi	r30, 0xB1	; 177
 38a:	f0 e0       	ldi	r31, 0x00	; 0
 38c:	80 81       	ld	r24, Z
 38e:	84 60       	ori	r24, 0x04	; 4
 390:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 392:	e0 eb       	ldi	r30, 0xB0	; 176
 394:	f0 e0       	ldi	r31, 0x00	; 0
 396:	80 81       	ld	r24, Z
 398:	81 60       	ori	r24, 0x01	; 1
 39a:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
 39c:	ea e7       	ldi	r30, 0x7A	; 122
 39e:	f0 e0       	ldi	r31, 0x00	; 0
 3a0:	80 81       	ld	r24, Z
 3a2:	84 60       	ori	r24, 0x04	; 4
 3a4:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
 3a6:	80 81       	ld	r24, Z
 3a8:	82 60       	ori	r24, 0x02	; 2
 3aa:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
 3ac:	80 81       	ld	r24, Z
 3ae:	81 60       	ori	r24, 0x01	; 1
 3b0:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 3b2:	80 81       	ld	r24, Z
 3b4:	80 68       	ori	r24, 0x80	; 128
 3b6:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 3b8:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 3bc:	08 95       	ret

000003be <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
 3be:	83 30       	cpi	r24, 0x03	; 3
 3c0:	81 f0       	breq	.+32     	; 0x3e2 <turnOffPWM+0x24>
 3c2:	28 f4       	brcc	.+10     	; 0x3ce <turnOffPWM+0x10>
 3c4:	81 30       	cpi	r24, 0x01	; 1
 3c6:	99 f0       	breq	.+38     	; 0x3ee <turnOffPWM+0x30>
 3c8:	82 30       	cpi	r24, 0x02	; 2
 3ca:	a1 f0       	breq	.+40     	; 0x3f4 <turnOffPWM+0x36>
 3cc:	08 95       	ret
 3ce:	87 30       	cpi	r24, 0x07	; 7
 3d0:	a9 f0       	breq	.+42     	; 0x3fc <turnOffPWM+0x3e>
 3d2:	88 30       	cpi	r24, 0x08	; 8
 3d4:	b9 f0       	breq	.+46     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 3d6:	84 30       	cpi	r24, 0x04	; 4
 3d8:	d1 f4       	brne	.+52     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 3da:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 3de:	8f 7d       	andi	r24, 0xDF	; 223
 3e0:	03 c0       	rjmp	.+6      	; 0x3e8 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
 3e2:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 3e6:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 3e8:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 3ec:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
 3ee:	84 b5       	in	r24, 0x24	; 36
 3f0:	8f 77       	andi	r24, 0x7F	; 127
 3f2:	02 c0       	rjmp	.+4      	; 0x3f8 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
 3f4:	84 b5       	in	r24, 0x24	; 36
 3f6:	8f 7d       	andi	r24, 0xDF	; 223
 3f8:	84 bd       	out	0x24, r24	; 36
 3fa:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
 3fc:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 400:	8f 77       	andi	r24, 0x7F	; 127
 402:	03 c0       	rjmp	.+6      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
 404:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 408:	8f 7d       	andi	r24, 0xDF	; 223
 40a:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 40e:	08 95       	ret

00000410 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
 410:	cf 93       	push	r28
 412:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
 414:	90 e0       	ldi	r25, 0x00	; 0
 416:	fc 01       	movw	r30, r24
 418:	e4 58       	subi	r30, 0x84	; 132
 41a:	ff 4f       	sbci	r31, 0xFF	; 255
 41c:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
 41e:	fc 01       	movw	r30, r24
 420:	e0 57       	subi	r30, 0x70	; 112
 422:	ff 4f       	sbci	r31, 0xFF	; 255
 424:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
 426:	88 23       	and	r24, r24
 428:	61 f1       	breq	.+88     	; 0x482 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
 42a:	90 e0       	ldi	r25, 0x00	; 0
 42c:	88 0f       	add	r24, r24
 42e:	99 1f       	adc	r25, r25
 430:	fc 01       	movw	r30, r24
 432:	e2 55       	subi	r30, 0x52	; 82
 434:	ff 4f       	sbci	r31, 0xFF	; 255
 436:	c5 91       	lpm	r28, Z+
 438:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
 43a:	fc 01       	movw	r30, r24
 43c:	ec 55       	subi	r30, 0x5C	; 92
 43e:	ff 4f       	sbci	r31, 0xFF	; 255
 440:	a5 91       	lpm	r26, Z+
 442:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
 444:	61 11       	cpse	r22, r1
 446:	09 c0       	rjmp	.+18     	; 0x45a <pinMode+0x4a>
		uint8_t oldSREG = SREG;
 448:	9f b7       	in	r25, 0x3f	; 63
                cli();
 44a:	f8 94       	cli
		*reg &= ~bit;
 44c:	88 81       	ld	r24, Y
 44e:	20 95       	com	r18
 450:	82 23       	and	r24, r18
 452:	88 83       	st	Y, r24
		*out &= ~bit;
 454:	ec 91       	ld	r30, X
 456:	2e 23       	and	r18, r30
 458:	0b c0       	rjmp	.+22     	; 0x470 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
 45a:	62 30       	cpi	r22, 0x02	; 2
 45c:	61 f4       	brne	.+24     	; 0x476 <pinMode+0x66>
		uint8_t oldSREG = SREG;
 45e:	9f b7       	in	r25, 0x3f	; 63
                cli();
 460:	f8 94       	cli
		*reg &= ~bit;
 462:	88 81       	ld	r24, Y
 464:	32 2f       	mov	r19, r18
 466:	30 95       	com	r19
 468:	83 23       	and	r24, r19
 46a:	88 83       	st	Y, r24
		*out |= bit;
 46c:	ec 91       	ld	r30, X
 46e:	2e 2b       	or	r18, r30
 470:	2c 93       	st	X, r18
		SREG = oldSREG;
 472:	9f bf       	out	0x3f, r25	; 63
 474:	06 c0       	rjmp	.+12     	; 0x482 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
 476:	8f b7       	in	r24, 0x3f	; 63
                cli();
 478:	f8 94       	cli
		*reg |= bit;
 47a:	e8 81       	ld	r30, Y
 47c:	2e 2b       	or	r18, r30
 47e:	28 83       	st	Y, r18
		SREG = oldSREG;
 480:	8f bf       	out	0x3f, r24	; 63
	}
}
 482:	df 91       	pop	r29
 484:	cf 91       	pop	r28
 486:	08 95       	ret

00000488 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
 488:	1f 93       	push	r17
 48a:	cf 93       	push	r28
 48c:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
 48e:	28 2f       	mov	r18, r24
 490:	30 e0       	ldi	r19, 0x00	; 0
 492:	f9 01       	movw	r30, r18
 494:	e8 59       	subi	r30, 0x98	; 152
 496:	ff 4f       	sbci	r31, 0xFF	; 255
 498:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
 49a:	f9 01       	movw	r30, r18
 49c:	e4 58       	subi	r30, 0x84	; 132
 49e:	ff 4f       	sbci	r31, 0xFF	; 255
 4a0:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
 4a2:	f9 01       	movw	r30, r18
 4a4:	e0 57       	subi	r30, 0x70	; 112
 4a6:	ff 4f       	sbci	r31, 0xFF	; 255
 4a8:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
 4aa:	cc 23       	and	r28, r28
 4ac:	c1 f0       	breq	.+48     	; 0x4de <digitalWrite+0x56>
 4ae:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 4b0:	81 11       	cpse	r24, r1
 4b2:	0e 94 df 01 	call	0x3be	; 0x3be <turnOffPWM>

	out = portOutputRegister(port);
 4b6:	ec 2f       	mov	r30, r28
 4b8:	f0 e0       	ldi	r31, 0x00	; 0
 4ba:	ee 0f       	add	r30, r30
 4bc:	ff 1f       	adc	r31, r31
 4be:	ec 55       	subi	r30, 0x5C	; 92
 4c0:	ff 4f       	sbci	r31, 0xFF	; 255
 4c2:	a5 91       	lpm	r26, Z+
 4c4:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
 4c6:	9f b7       	in	r25, 0x3f	; 63
	cli();
 4c8:	f8 94       	cli

	if (val == LOW) {
 4ca:	11 11       	cpse	r17, r1
 4cc:	04 c0       	rjmp	.+8      	; 0x4d6 <digitalWrite+0x4e>
		*out &= ~bit;
 4ce:	8c 91       	ld	r24, X
 4d0:	d0 95       	com	r29
 4d2:	d8 23       	and	r29, r24
 4d4:	02 c0       	rjmp	.+4      	; 0x4da <digitalWrite+0x52>
	} else {
		*out |= bit;
 4d6:	ec 91       	ld	r30, X
 4d8:	de 2b       	or	r29, r30
 4da:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
 4dc:	9f bf       	out	0x3f, r25	; 63
}
 4de:	df 91       	pop	r29
 4e0:	cf 91       	pop	r28
 4e2:	1f 91       	pop	r17
 4e4:	08 95       	ret

000004e6 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
 4e6:	08 95       	ret

000004e8 <_exit>:
 4e8:	f8 94       	cli

000004ea <__stop_program>:
 4ea:	ff cf       	rjmp	.-2      	; 0x4ea <__stop_program>
