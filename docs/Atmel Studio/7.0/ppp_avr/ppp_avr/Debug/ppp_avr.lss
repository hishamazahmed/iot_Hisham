
ppp_avr.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000bc  00800100  000002a0  00000314  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002a0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000003d0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000400  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  00000440  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b60  00000000  00000000  00000488  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007fc  00000000  00000000  00000fe8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003f5  00000000  00000000  000017e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000094  00000000  00000000  00001bdc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000042c  00000000  00000000  00001c70  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001cd  00000000  00000000  0000209c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00002269  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 ea       	ldi	r30, 0xA0	; 160
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 3b       	cpi	r26, 0xBC	; 188
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac eb       	ldi	r26, 0xBC	; 188
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ac 3b       	cpi	r26, 0xBC	; 188
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 9c 00 	call	0x138	; 0x138 <main>
  9e:	0c 94 4e 01 	jmp	0x29c	; 0x29c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <adc_init>:
	
	return 0;
}

void adc_init(void){
	ADCSRA |= ((1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0));    //16Mhz/128 = 125Khz the ADC reference clock
  a6:	ea e7       	ldi	r30, 0x7A	; 122
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	87 60       	ori	r24, 0x07	; 7
  ae:	80 83       	st	Z, r24
	ADMUX |= (1<<REFS0);                //Voltage reference from Avcc (5v)
  b0:	ac e7       	ldi	r26, 0x7C	; 124
  b2:	b0 e0       	ldi	r27, 0x00	; 0
  b4:	8c 91       	ld	r24, X
  b6:	80 64       	ori	r24, 0x40	; 64
  b8:	8c 93       	st	X, r24
	ADCSRA |= (1<<ADEN);                //Turn on ADC
  ba:	80 81       	ld	r24, Z
  bc:	80 68       	ori	r24, 0x80	; 128
  be:	80 83       	st	Z, r24
	//ADMUX = (1<<ADLAR);
	ADCSRA |= (1<<ADSC);                //Do an initial conversion because this one is the slowest and to ensure that everything is up and running
  c0:	80 81       	ld	r24, Z
  c2:	80 64       	ori	r24, 0x40	; 64
  c4:	80 83       	st	Z, r24
  c6:	08 95       	ret

000000c8 <read_adc>:
}

uint16_t read_adc(uint8_t channel){
	ADMUX &= 0xF0;                    //Clear the older channel that was read
  c8:	ec e7       	ldi	r30, 0x7C	; 124
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	90 81       	ld	r25, Z
  ce:	90 7f       	andi	r25, 0xF0	; 240
  d0:	90 83       	st	Z, r25
	ADMUX |= channel;                //Defines the new ADC channel to be read
  d2:	90 81       	ld	r25, Z
  d4:	89 2b       	or	r24, r25
  d6:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);                //Starts a new conversion
  d8:	ea e7       	ldi	r30, 0x7A	; 122
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	80 81       	ld	r24, Z
  de:	80 64       	ori	r24, 0x40	; 64
  e0:	80 83       	st	Z, r24
	while(ADCSRA & (1<<ADSC));            //Wait until the conversion is done
  e2:	80 81       	ld	r24, Z
  e4:	86 fd       	sbrc	r24, 6
  e6:	fd cf       	rjmp	.-6      	; 0xe2 <read_adc+0x1a>
	return ADC;                    //Returns the ADC value of the chosen channel
  e8:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
  ec:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
}
  f0:	08 95       	ret

000000f2 <USART_init>:

void USART_init(void){
	
	UBRR0H = (uint8_t)(BAUD_PRESCALLER>>8);
  f2:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = (uint8_t)(BAUD_PRESCALLER);
  f6:	83 e3       	ldi	r24, 0x33	; 51
  f8:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
  fc:	88 e1       	ldi	r24, 0x18	; 24
  fe:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	UCSR0C = (3<<UCSZ00);
 102:	86 e0       	ldi	r24, 0x06	; 6
 104:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 108:	08 95       	ret

0000010a <USART_send>:
}

void USART_send( unsigned char data){	
	while(!(UCSR0A & (1<<UDRE0)));
 10a:	e0 ec       	ldi	r30, 0xC0	; 192
 10c:	f0 e0       	ldi	r31, 0x00	; 0
 10e:	90 81       	ld	r25, Z
 110:	95 ff       	sbrs	r25, 5
 112:	fd cf       	rjmp	.-6      	; 0x10e <USART_send+0x4>
	//printf("value is %u ",data);
	//UDR0 = '1';
	UDR0 = data;	
 114:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 118:	08 95       	ret

0000011a <USART_putstring>:
}

void USART_putstring(char* StringPtr){	
 11a:	cf 93       	push	r28
 11c:	df 93       	push	r29
 11e:	ec 01       	movw	r28, r24
	while(*StringPtr != 0x00){		
 120:	88 81       	ld	r24, Y
 122:	88 23       	and	r24, r24
 124:	31 f0       	breq	.+12     	; 0x132 <USART_putstring+0x18>
 126:	21 96       	adiw	r28, 0x01	; 1
		USART_send(*StringPtr);
 128:	0e 94 85 00 	call	0x10a	; 0x10a <USART_send>
	//UDR0 = '1';
	UDR0 = data;	
}

void USART_putstring(char* StringPtr){	
	while(*StringPtr != 0x00){		
 12c:	89 91       	ld	r24, Y+
 12e:	81 11       	cpse	r24, r1
 130:	fb cf       	rjmp	.-10     	; 0x128 <USART_putstring+0xe>
		USART_send(*StringPtr);
		StringPtr++;
	}
	
}
 132:	df 91       	pop	r29
 134:	cf 91       	pop	r28
 136:	08 95       	ret

00000138 <main>:
uint16_t read_adc(uint8_t channel);    //Function to read an arbitrary analogic channel/pin
void USART_init(void);            //Function to initialize and configure the USART/serial
void USART_send( unsigned char data);    //Function that sends a char over the serial port
void USART_putstring(char* StringPtr);    //Function that sends a string over the serial port

int main(void){
 138:	cf 93       	push	r28
 13a:	df 93       	push	r29
 13c:	cd b7       	in	r28, 0x3d	; 61
 13e:	de b7       	in	r29, 0x3e	; 62
 140:	c8 5c       	subi	r28, 0xC8	; 200
 142:	d1 09       	sbc	r29, r1
 144:	0f b6       	in	r0, 0x3f	; 63
 146:	f8 94       	cli
 148:	de bf       	out	0x3e, r29	; 62
 14a:	0f be       	out	0x3f, r0	; 63
 14c:	cd bf       	out	0x3d, r28	; 61
	adc_init();        //Setup the ADC
 14e:	0e 94 53 00 	call	0xa6	; 0xa6 <adc_init>
	USART_init();        //Setup the USART
 152:	0e 94 79 00 	call	0xf2	; 0xf2 <USART_init>
	DDRB=0xff;
 156:	8f ef       	ldi	r24, 0xFF	; 255
 158:	84 b9       	out	0x04, r24	; 4
// 				USART_send(13);
// 				USART_send(13);
				}
				
					if (y < 150){
						PORTB = (1<<PB1);
 15a:	68 94       	set
 15c:	dd 24       	eor	r13, r13
 15e:	d1 f8       	bld	r13, 1
int main(void){
	adc_init();        //Setup the ADC
	USART_init();        //Setup the USART
	DDRB=0xff;
	while(1){
		uint16_t x= read_adc(0);
 160:	80 e0       	ldi	r24, 0x00	; 0
 162:	0e 94 64 00 	call	0xc8	; 0xc8 <read_adc>
 166:	8c 01       	movw	r16, r24
		uint16_t y= read_adc(1);	
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	0e 94 64 00 	call	0xc8	; 0xc8 <read_adc>
 16e:	7c 01       	movw	r14, r24
		
		char buffer[100];
		utoa(((x-2)/2),buffer,10);
 170:	02 50       	subi	r16, 0x02	; 2
 172:	11 09       	sbc	r17, r1
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__utoa_ncheck (unsigned int, char *, unsigned char);
	return __utoa_ncheck (__val, __s, __radix);
 174:	4a e0       	ldi	r20, 0x0A	; 10
 176:	be 01       	movw	r22, r28
 178:	6b 59       	subi	r22, 0x9B	; 155
 17a:	7f 4f       	sbci	r23, 0xFF	; 255
 17c:	c8 01       	movw	r24, r16
 17e:	96 95       	lsr	r25
 180:	87 95       	ror	r24
 182:	0e 94 24 01 	call	0x248	; 0x248 <__utoa_ncheck>
 186:	4a e0       	ldi	r20, 0x0A	; 10
 188:	be 01       	movw	r22, r28
 18a:	6f 5f       	subi	r22, 0xFF	; 255
 18c:	7f 4f       	sbci	r23, 0xFF	; 255
 18e:	c7 01       	movw	r24, r14
 190:	0e 94 24 01 	call	0x248	; 0x248 <__utoa_ncheck>
		char buffer2[100];
		utoa(y,buffer2,10);
		USART_putstring("welcome to Auto room humidifier and lighting system \r");
 194:	80 e0       	ldi	r24, 0x00	; 0
 196:	91 e0       	ldi	r25, 0x01	; 1
 198:	0e 94 8d 00 	call	0x11a	; 0x11a <USART_putstring>
		USART_putstring("Temperature value is :");
 19c:	86 e3       	ldi	r24, 0x36	; 54
 19e:	91 e0       	ldi	r25, 0x01	; 1
 1a0:	0e 94 8d 00 	call	0x11a	; 0x11a <USART_putstring>
		USART_putstring(buffer);
 1a4:	ce 01       	movw	r24, r28
 1a6:	8b 59       	subi	r24, 0x9B	; 155
 1a8:	9f 4f       	sbci	r25, 0xFF	; 255
 1aa:	0e 94 8d 00 	call	0x11a	; 0x11a <USART_putstring>
		USART_putstring("C");
 1ae:	8d e4       	ldi	r24, 0x4D	; 77
 1b0:	91 e0       	ldi	r25, 0x01	; 1
 1b2:	0e 94 8d 00 	call	0x11a	; 0x11a <USART_putstring>
		
		USART_send(13);
 1b6:	8d e0       	ldi	r24, 0x0D	; 13
 1b8:	0e 94 85 00 	call	0x10a	; 0x10a <USART_send>
		USART_putstring("The light outside is:");
 1bc:	8f e4       	ldi	r24, 0x4F	; 79
 1be:	91 e0       	ldi	r25, 0x01	; 1
 1c0:	0e 94 8d 00 	call	0x11a	; 0x11a <USART_putstring>
		//USART_putstring(13);
		USART_putstring(buffer2);
 1c4:	ce 01       	movw	r24, r28
 1c6:	01 96       	adiw	r24, 0x01	; 1
 1c8:	0e 94 8d 00 	call	0x11a	; 0x11a <USART_putstring>
		USART_send(13);
 1cc:	8d e0       	ldi	r24, 0x0D	; 13
 1ce:	0e 94 85 00 	call	0x10a	; 0x10a <USART_send>
		//USART_putstring("Lights are off");
		
 		if (((x-2)/2) > 75){
 1d2:	08 39       	cpi	r16, 0x98	; 152
 1d4:	11 05       	cpc	r17, r1
 1d6:	70 f0       	brcs	.+28     	; 0x1f4 <main+0xbc>
			PORTB =(1<<PB0);
 1d8:	81 e0       	ldi	r24, 0x01	; 1
 1da:	85 b9       	out	0x05, r24	; 5
			USART_putstring(("temp is HIGH!!"));
 1dc:	85 e6       	ldi	r24, 0x65	; 101
 1de:	91 e0       	ldi	r25, 0x01	; 1
 1e0:	0e 94 8d 00 	call	0x11a	; 0x11a <USART_putstring>
			USART_send(13);
 1e4:	8d e0       	ldi	r24, 0x0D	; 13
 1e6:	0e 94 85 00 	call	0x10a	; 0x10a <USART_send>
			USART_putstring(("motor turning on \r"));
 1ea:	84 e7       	ldi	r24, 0x74	; 116
 1ec:	91 e0       	ldi	r25, 0x01	; 1
 1ee:	0e 94 8d 00 	call	0x11a	; 0x11a <USART_putstring>
 1f2:	08 c0       	rjmp	.+16     	; 0x204 <main+0xcc>
// 			USART_send(13);
			//PORTB = 0b00000011;
			
		}
			else{
				PORTB &=~ (1<<PB0);
 1f4:	28 98       	cbi	0x05, 0	; 5
				USART_putstring(("motor is off"));
 1f6:	87 e8       	ldi	r24, 0x87	; 135
 1f8:	91 e0       	ldi	r25, 0x01	; 1
 1fa:	0e 94 8d 00 	call	0x11a	; 0x11a <USART_putstring>
				USART_send(13);
 1fe:	8d e0       	ldi	r24, 0x0D	; 13
 200:	0e 94 85 00 	call	0x10a	; 0x10a <USART_send>
// 				USART_send(13);
// 				USART_send(13);
				}
				
					if (y < 150){
 204:	26 e9       	ldi	r18, 0x96	; 150
 206:	e2 16       	cp	r14, r18
 208:	f1 04       	cpc	r15, r1
 20a:	30 f4       	brcc	.+12     	; 0x218 <main+0xe0>
						PORTB = (1<<PB1);
 20c:	d5 b8       	out	0x05, r13	; 5
						//PORTB = 0xff;	
						USART_putstring("Lights are turning on \r ");
 20e:	84 e9       	ldi	r24, 0x94	; 148
 210:	91 e0       	ldi	r25, 0x01	; 1
 212:	0e 94 8d 00 	call	0x11a	; 0x11a <USART_putstring>
 216:	05 c0       	rjmp	.+10     	; 0x222 <main+0xea>
						}
					else
					{
						PORTB &=~ (1<<PB1) ;
 218:	29 98       	cbi	0x05, 1	; 5
						USART_putstring("Lights are off");
 21a:	8d ea       	ldi	r24, 0xAD	; 173
 21c:	91 e0       	ldi	r25, 0x01	; 1
 21e:	0e 94 8d 00 	call	0x11a	; 0x11a <USART_putstring>
					}
				USART_send(13);
 222:	8d e0       	ldi	r24, 0x0D	; 13
 224:	0e 94 85 00 	call	0x10a	; 0x10a <USART_send>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 228:	8f ef       	ldi	r24, 0xFF	; 255
 22a:	95 ea       	ldi	r25, 0xA5	; 165
 22c:	2e e0       	ldi	r18, 0x0E	; 14
 22e:	81 50       	subi	r24, 0x01	; 1
 230:	90 40       	sbci	r25, 0x00	; 0
 232:	20 40       	sbci	r18, 0x00	; 0
 234:	e1 f7       	brne	.-8      	; 0x22e <main+0xf6>
 236:	00 c0       	rjmp	.+0      	; 0x238 <main+0x100>
 238:	00 00       	nop
		_delay_ms(300);
		USART_send(13);
 23a:	8d e0       	ldi	r24, 0x0D	; 13
 23c:	0e 94 85 00 	call	0x10a	; 0x10a <USART_send>
		USART_send(13);
 240:	8d e0       	ldi	r24, 0x0D	; 13
 242:	0e 94 85 00 	call	0x10a	; 0x10a <USART_send>
		
	}
 246:	8c cf       	rjmp	.-232    	; 0x160 <main+0x28>

00000248 <__utoa_ncheck>:
 248:	bb 27       	eor	r27, r27

0000024a <__utoa_common>:
 24a:	fb 01       	movw	r30, r22
 24c:	55 27       	eor	r21, r21
 24e:	aa 27       	eor	r26, r26
 250:	88 0f       	add	r24, r24
 252:	99 1f       	adc	r25, r25
 254:	aa 1f       	adc	r26, r26
 256:	a4 17       	cp	r26, r20
 258:	10 f0       	brcs	.+4      	; 0x25e <__utoa_common+0x14>
 25a:	a4 1b       	sub	r26, r20
 25c:	83 95       	inc	r24
 25e:	50 51       	subi	r21, 0x10	; 16
 260:	b9 f7       	brne	.-18     	; 0x250 <__utoa_common+0x6>
 262:	a0 5d       	subi	r26, 0xD0	; 208
 264:	aa 33       	cpi	r26, 0x3A	; 58
 266:	08 f0       	brcs	.+2      	; 0x26a <__utoa_common+0x20>
 268:	a9 5d       	subi	r26, 0xD9	; 217
 26a:	a1 93       	st	Z+, r26
 26c:	00 97       	sbiw	r24, 0x00	; 0
 26e:	79 f7       	brne	.-34     	; 0x24e <__utoa_common+0x4>
 270:	b1 11       	cpse	r27, r1
 272:	b1 93       	st	Z+, r27
 274:	11 92       	st	Z+, r1
 276:	cb 01       	movw	r24, r22
 278:	0c 94 3e 01 	jmp	0x27c	; 0x27c <strrev>

0000027c <strrev>:
 27c:	dc 01       	movw	r26, r24
 27e:	fc 01       	movw	r30, r24
 280:	67 2f       	mov	r22, r23
 282:	71 91       	ld	r23, Z+
 284:	77 23       	and	r23, r23
 286:	e1 f7       	brne	.-8      	; 0x280 <strrev+0x4>
 288:	32 97       	sbiw	r30, 0x02	; 2
 28a:	04 c0       	rjmp	.+8      	; 0x294 <strrev+0x18>
 28c:	7c 91       	ld	r23, X
 28e:	6d 93       	st	X+, r22
 290:	70 83       	st	Z, r23
 292:	62 91       	ld	r22, -Z
 294:	ae 17       	cp	r26, r30
 296:	bf 07       	cpc	r27, r31
 298:	c8 f3       	brcs	.-14     	; 0x28c <strrev+0x10>
 29a:	08 95       	ret

0000029c <_exit>:
 29c:	f8 94       	cli

0000029e <__stop_program>:
 29e:	ff cf       	rjmp	.-2      	; 0x29e <__stop_program>
