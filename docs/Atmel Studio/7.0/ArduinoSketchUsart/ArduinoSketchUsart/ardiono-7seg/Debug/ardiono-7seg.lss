
ardiono-7seg.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000048  00800100  00000772  00000806  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000772  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000a6  00800148  00800148  0000084e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000084e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000880  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000270  00000000  00000000  000008c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00007127  00000000  00000000  00000b30  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000165d  00000000  00000000  00007c57  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000147b  00000000  00000000  000092b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000070c  00000000  00000000  0000a730  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001e49  00000000  00000000  0000ae3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000255e  00000000  00000000  0000cc85  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000230  00000000  00000000  0000f1e3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 35 00 	jmp	0x6a	; 0x6a <__ctors_end>
   4:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  38:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  40:	0c 94 a8 02 	jmp	0x550	; 0x550 <__vector_16>
  44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  48:	0c 94 b4 01 	jmp	0x368	; 0x368 <__vector_18>
  4c:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__vector_19>
  50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>

00000068 <__ctors_start>:
  68:	16 02       	muls	r17, r22

0000006a <__ctors_end>:
  6a:	11 24       	eor	r1, r1
  6c:	1f be       	out	0x3f, r1	; 63
  6e:	cf ef       	ldi	r28, 0xFF	; 255
  70:	d8 e0       	ldi	r29, 0x08	; 8
  72:	de bf       	out	0x3e, r29	; 62
  74:	cd bf       	out	0x3d, r28	; 61

00000076 <__do_copy_data>:
  76:	11 e0       	ldi	r17, 0x01	; 1
  78:	a0 e0       	ldi	r26, 0x00	; 0
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	e2 e7       	ldi	r30, 0x72	; 114
  7e:	f7 e0       	ldi	r31, 0x07	; 7
  80:	02 c0       	rjmp	.+4      	; 0x86 <__do_copy_data+0x10>
  82:	05 90       	lpm	r0, Z+
  84:	0d 92       	st	X+, r0
  86:	a8 34       	cpi	r26, 0x48	; 72
  88:	b1 07       	cpc	r27, r17
  8a:	d9 f7       	brne	.-10     	; 0x82 <__do_copy_data+0xc>

0000008c <__do_clear_bss>:
  8c:	21 e0       	ldi	r18, 0x01	; 1
  8e:	a8 e4       	ldi	r26, 0x48	; 72
  90:	b1 e0       	ldi	r27, 0x01	; 1
  92:	01 c0       	rjmp	.+2      	; 0x96 <.do_clear_bss_start>

00000094 <.do_clear_bss_loop>:
  94:	1d 92       	st	X+, r1

00000096 <.do_clear_bss_start>:
  96:	ae 3e       	cpi	r26, 0xEE	; 238
  98:	b2 07       	cpc	r27, r18
  9a:	e1 f7       	brne	.-8      	; 0x94 <.do_clear_bss_loop>

0000009c <__do_global_ctors>:
  9c:	10 e0       	ldi	r17, 0x00	; 0
  9e:	c5 e3       	ldi	r28, 0x35	; 53
  a0:	d0 e0       	ldi	r29, 0x00	; 0
  a2:	04 c0       	rjmp	.+8      	; 0xac <__do_global_ctors+0x10>
  a4:	21 97       	sbiw	r28, 0x01	; 1
  a6:	fe 01       	movw	r30, r28
  a8:	0e 94 b1 03 	call	0x762	; 0x762 <__tablejump2__>
  ac:	c4 33       	cpi	r28, 0x34	; 52
  ae:	d1 07       	cpc	r29, r17
  b0:	c9 f7       	brne	.-14     	; 0xa4 <__do_global_ctors+0x8>
  b2:	0e 94 44 02 	call	0x488	; 0x488 <main>
  b6:	0c 94 b7 03 	jmp	0x76e	; 0x76e <_exit>

000000ba <__bad_interrupt>:
  ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <setup>:
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
  be:	26 e0       	ldi	r18, 0x06	; 6
  c0:	4c e7       	ldi	r20, 0x7C	; 124
  c2:	59 ed       	ldi	r21, 0xD9	; 217
  c4:	61 e0       	ldi	r22, 0x01	; 1
  c6:	70 e0       	ldi	r23, 0x00	; 0
  c8:	88 e4       	ldi	r24, 0x48	; 72
  ca:	91 e0       	ldi	r25, 0x01	; 1
  cc:	0e 94 4f 01 	call	0x29e	; 0x29e <_ZN14HardwareSerial5beginEmh>
	// Open serial communications and wait for port to open:
	Serial.begin(121212);
	while (!Serial) {
		; // wait for serial port to connect. Needed for native USB port only
	}
	Serial.println("Goodmorning  ^(moon!)");	
  d0:	60 e0       	ldi	r22, 0x00	; 0
  d2:	71 e0       	ldi	r23, 0x01	; 1
  d4:	88 e4       	ldi	r24, 0x48	; 72
  d6:	91 e0       	ldi	r25, 0x01	; 1
  d8:	0c 94 96 02 	jmp	0x52c	; 0x52c <_ZN5Print7printlnEPKc>

000000dc <loop>:
}

void loop() { // run over and over
	
	Serial.println("Goodnight moon!");
  dc:	66 e1       	ldi	r22, 0x16	; 22
  de:	71 e0       	ldi	r23, 0x01	; 1
  e0:	88 e4       	ldi	r24, 0x48	; 72
  e2:	91 e0       	ldi	r25, 0x01	; 1
  e4:	0e 94 96 02 	call	0x52c	; 0x52c <_ZN5Print7printlnEPKc>
	delay(200);
  e8:	68 ec       	ldi	r22, 0xC8	; 200
  ea:	70 e0       	ldi	r23, 0x00	; 0
  ec:	80 e0       	ldi	r24, 0x00	; 0
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	0c 94 17 03 	jmp	0x62e	; 0x62e <delay>

000000f4 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
  f4:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
  f6:	91 8d       	ldd	r25, Z+25	; 0x19
  f8:	22 8d       	ldd	r18, Z+26	; 0x1a
  fa:	89 2f       	mov	r24, r25
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	80 5c       	subi	r24, 0xC0	; 192
 100:	9f 4f       	sbci	r25, 0xFF	; 255
 102:	82 1b       	sub	r24, r18
 104:	91 09       	sbc	r25, r1
}
 106:	8f 73       	andi	r24, 0x3F	; 63
 108:	99 27       	eor	r25, r25
 10a:	08 95       	ret

0000010c <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
 10c:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
 10e:	91 8d       	ldd	r25, Z+25	; 0x19
 110:	82 8d       	ldd	r24, Z+26	; 0x1a
 112:	98 17       	cp	r25, r24
 114:	31 f0       	breq	.+12     	; 0x122 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
 116:	82 8d       	ldd	r24, Z+26	; 0x1a
 118:	e8 0f       	add	r30, r24
 11a:	f1 1d       	adc	r31, r1
 11c:	85 8d       	ldd	r24, Z+29	; 0x1d
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 122:	8f ef       	ldi	r24, 0xFF	; 255
 124:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
 126:	08 95       	ret

00000128 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
 128:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
 12a:	91 8d       	ldd	r25, Z+25	; 0x19
 12c:	82 8d       	ldd	r24, Z+26	; 0x1a
 12e:	98 17       	cp	r25, r24
 130:	61 f0       	breq	.+24     	; 0x14a <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
 132:	82 8d       	ldd	r24, Z+26	; 0x1a
 134:	df 01       	movw	r26, r30
 136:	a8 0f       	add	r26, r24
 138:	b1 1d       	adc	r27, r1
 13a:	5d 96       	adiw	r26, 0x1d	; 29
 13c:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
 13e:	92 8d       	ldd	r25, Z+26	; 0x1a
 140:	9f 5f       	subi	r25, 0xFF	; 255
 142:	9f 73       	andi	r25, 0x3F	; 63
 144:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 14a:	8f ef       	ldi	r24, 0xFF	; 255
 14c:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
 14e:	08 95       	ret

00000150 <_ZN14HardwareSerial17availableForWriteEv>:
{
#if (SERIAL_TX_BUFFER_SIZE>256)
  uint8_t oldSREG = SREG;
  cli();
#endif
  tx_buffer_index_t head = _tx_buffer_head;
 150:	fc 01       	movw	r30, r24
 152:	53 8d       	ldd	r21, Z+27	; 0x1b
  tx_buffer_index_t tail = _tx_buffer_tail;
 154:	44 8d       	ldd	r20, Z+28	; 0x1c
 156:	25 2f       	mov	r18, r21
 158:	30 e0       	ldi	r19, 0x00	; 0
 15a:	84 2f       	mov	r24, r20
 15c:	90 e0       	ldi	r25, 0x00	; 0
#if (SERIAL_TX_BUFFER_SIZE>256)
  SREG = oldSREG;
#endif
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
 15e:	82 1b       	sub	r24, r18
 160:	93 0b       	sbc	r25, r19
 162:	54 17       	cp	r21, r20
 164:	10 f0       	brcs	.+4      	; 0x16a <_ZN14HardwareSerial17availableForWriteEv+0x1a>
 166:	cf 96       	adiw	r24, 0x3f	; 63
 168:	08 95       	ret
  return tail - head - 1;
 16a:	01 97       	sbiw	r24, 0x01	; 1
}
 16c:	08 95       	ret

0000016e <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
 16e:	8c e0       	ldi	r24, 0x0C	; 12
 170:	92 e0       	ldi	r25, 0x02	; 2
 172:	89 2b       	or	r24, r25
 174:	49 f0       	breq	.+18     	; 0x188 <_Z14serialEventRunv+0x1a>
 176:	80 e0       	ldi	r24, 0x00	; 0
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	89 2b       	or	r24, r25
 17c:	29 f0       	breq	.+10     	; 0x188 <_Z14serialEventRunv+0x1a>
 17e:	0e 94 0c 02 	call	0x418	; 0x418 <_Z17Serial0_availablev>
 182:	81 11       	cpse	r24, r1
 184:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
 188:	08 95       	ret

0000018a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
 18a:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
 18c:	84 8d       	ldd	r24, Z+28	; 0x1c
 18e:	df 01       	movw	r26, r30
 190:	a8 0f       	add	r26, r24
 192:	b1 1d       	adc	r27, r1
 194:	a3 5a       	subi	r26, 0xA3	; 163
 196:	bf 4f       	sbci	r27, 0xFF	; 255
 198:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
 19a:	84 8d       	ldd	r24, Z+28	; 0x1c
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	01 96       	adiw	r24, 0x01	; 1
 1a0:	8f 73       	andi	r24, 0x3F	; 63
 1a2:	99 27       	eor	r25, r25
 1a4:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
 1a6:	a6 89       	ldd	r26, Z+22	; 0x16
 1a8:	b7 89       	ldd	r27, Z+23	; 0x17
 1aa:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
 1ac:	a0 89       	ldd	r26, Z+16	; 0x10
 1ae:	b1 89       	ldd	r27, Z+17	; 0x11
 1b0:	8c 91       	ld	r24, X
 1b2:	80 64       	ori	r24, 0x40	; 64
 1b4:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
 1b6:	93 8d       	ldd	r25, Z+27	; 0x1b
 1b8:	84 8d       	ldd	r24, Z+28	; 0x1c
 1ba:	98 13       	cpse	r25, r24
 1bc:	06 c0       	rjmp	.+12     	; 0x1ca <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
 1be:	02 88       	ldd	r0, Z+18	; 0x12
 1c0:	f3 89       	ldd	r31, Z+19	; 0x13
 1c2:	e0 2d       	mov	r30, r0
 1c4:	80 81       	ld	r24, Z
 1c6:	8f 7d       	andi	r24, 0xDF	; 223
 1c8:	80 83       	st	Z, r24
 1ca:	08 95       	ret

000001cc <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
 1cc:	ef 92       	push	r14
 1ce:	ff 92       	push	r15
 1d0:	0f 93       	push	r16
 1d2:	1f 93       	push	r17
 1d4:	cf 93       	push	r28
 1d6:	df 93       	push	r29
 1d8:	ec 01       	movw	r28, r24
  _written = true;
 1da:	81 e0       	ldi	r24, 0x01	; 1
 1dc:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
 1de:	9b 8d       	ldd	r25, Y+27	; 0x1b
 1e0:	8c 8d       	ldd	r24, Y+28	; 0x1c
 1e2:	98 13       	cpse	r25, r24
 1e4:	05 c0       	rjmp	.+10     	; 0x1f0 <_ZN14HardwareSerial5writeEh+0x24>
 1e6:	e8 89       	ldd	r30, Y+16	; 0x10
 1e8:	f9 89       	ldd	r31, Y+17	; 0x11
 1ea:	80 81       	ld	r24, Z
 1ec:	85 fd       	sbrc	r24, 5
 1ee:	24 c0       	rjmp	.+72     	; 0x238 <_ZN14HardwareSerial5writeEh+0x6c>
 1f0:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
 1f2:	0b 8d       	ldd	r16, Y+27	; 0x1b
 1f4:	10 e0       	ldi	r17, 0x00	; 0
 1f6:	0f 5f       	subi	r16, 0xFF	; 255
 1f8:	1f 4f       	sbci	r17, 0xFF	; 255
 1fa:	0f 73       	andi	r16, 0x3F	; 63
 1fc:	11 27       	eor	r17, r17
 1fe:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
 200:	8c 8d       	ldd	r24, Y+28	; 0x1c
 202:	e8 12       	cpse	r14, r24
 204:	0c c0       	rjmp	.+24     	; 0x21e <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
 206:	0f b6       	in	r0, 0x3f	; 63
 208:	07 fc       	sbrc	r0, 7
 20a:	fa cf       	rjmp	.-12     	; 0x200 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
 20c:	e8 89       	ldd	r30, Y+16	; 0x10
 20e:	f9 89       	ldd	r31, Y+17	; 0x11
 210:	80 81       	ld	r24, Z
 212:	85 ff       	sbrs	r24, 5
 214:	f5 cf       	rjmp	.-22     	; 0x200 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
 216:	ce 01       	movw	r24, r28
 218:	0e 94 c5 00 	call	0x18a	; 0x18a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
 21c:	f1 cf       	rjmp	.-30     	; 0x200 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
 21e:	8b 8d       	ldd	r24, Y+27	; 0x1b
 220:	fe 01       	movw	r30, r28
 222:	e8 0f       	add	r30, r24
 224:	f1 1d       	adc	r31, r1
 226:	e3 5a       	subi	r30, 0xA3	; 163
 228:	ff 4f       	sbci	r31, 0xFF	; 255
 22a:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
 22c:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
 22e:	ea 89       	ldd	r30, Y+18	; 0x12
 230:	fb 89       	ldd	r31, Y+19	; 0x13
 232:	80 81       	ld	r24, Z
 234:	80 62       	ori	r24, 0x20	; 32
 236:	07 c0       	rjmp	.+14     	; 0x246 <_ZN14HardwareSerial5writeEh+0x7a>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
 238:	ee 89       	ldd	r30, Y+22	; 0x16
 23a:	ff 89       	ldd	r31, Y+23	; 0x17
 23c:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
 23e:	e8 89       	ldd	r30, Y+16	; 0x10
 240:	f9 89       	ldd	r31, Y+17	; 0x11
 242:	80 81       	ld	r24, Z
 244:	80 64       	ori	r24, 0x40	; 64
 246:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
 248:	81 e0       	ldi	r24, 0x01	; 1
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	df 91       	pop	r29
 24e:	cf 91       	pop	r28
 250:	1f 91       	pop	r17
 252:	0f 91       	pop	r16
 254:	ff 90       	pop	r15
 256:	ef 90       	pop	r14
 258:	08 95       	ret

0000025a <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
 25a:	cf 93       	push	r28
 25c:	df 93       	push	r29
 25e:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
 260:	88 8d       	ldd	r24, Y+24	; 0x18
 262:	88 23       	and	r24, r24
 264:	c9 f0       	breq	.+50     	; 0x298 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
 266:	ea 89       	ldd	r30, Y+18	; 0x12
 268:	fb 89       	ldd	r31, Y+19	; 0x13
 26a:	80 81       	ld	r24, Z
 26c:	85 fd       	sbrc	r24, 5
 26e:	05 c0       	rjmp	.+10     	; 0x27a <_ZN14HardwareSerial5flushEv+0x20>
 270:	a8 89       	ldd	r26, Y+16	; 0x10
 272:	b9 89       	ldd	r27, Y+17	; 0x11
 274:	8c 91       	ld	r24, X
 276:	86 fd       	sbrc	r24, 6
 278:	0f c0       	rjmp	.+30     	; 0x298 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
 27a:	0f b6       	in	r0, 0x3f	; 63
 27c:	07 fc       	sbrc	r0, 7
 27e:	f5 cf       	rjmp	.-22     	; 0x26a <_ZN14HardwareSerial5flushEv+0x10>
 280:	80 81       	ld	r24, Z
 282:	85 ff       	sbrs	r24, 5
 284:	f2 cf       	rjmp	.-28     	; 0x26a <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
 286:	a8 89       	ldd	r26, Y+16	; 0x10
 288:	b9 89       	ldd	r27, Y+17	; 0x11
 28a:	8c 91       	ld	r24, X
 28c:	85 ff       	sbrs	r24, 5
 28e:	ed cf       	rjmp	.-38     	; 0x26a <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
 290:	ce 01       	movw	r24, r28
 292:	0e 94 c5 00 	call	0x18a	; 0x18a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
 296:	e7 cf       	rjmp	.-50     	; 0x266 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
 298:	df 91       	pop	r29
 29a:	cf 91       	pop	r28
 29c:	08 95       	ret

0000029e <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
 29e:	cf 92       	push	r12
 2a0:	df 92       	push	r13
 2a2:	ef 92       	push	r14
 2a4:	ff 92       	push	r15
 2a6:	1f 93       	push	r17
 2a8:	cf 93       	push	r28
 2aa:	df 93       	push	r29
 2ac:	ec 01       	movw	r28, r24
 2ae:	6a 01       	movw	r12, r20
 2b0:	7b 01       	movw	r14, r22
 2b2:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
 2b4:	e8 89       	ldd	r30, Y+16	; 0x10
 2b6:	f9 89       	ldd	r31, Y+17	; 0x11
 2b8:	82 e0       	ldi	r24, 0x02	; 2
 2ba:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
 2bc:	41 15       	cp	r20, r1
 2be:	51 4e       	sbci	r21, 0xE1	; 225
 2c0:	61 05       	cpc	r22, r1
 2c2:	71 05       	cpc	r23, r1
 2c4:	b1 f0       	breq	.+44     	; 0x2f2 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
 2c6:	60 e0       	ldi	r22, 0x00	; 0
 2c8:	79 e0       	ldi	r23, 0x09	; 9
 2ca:	8d e3       	ldi	r24, 0x3D	; 61
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	a7 01       	movw	r20, r14
 2d0:	96 01       	movw	r18, r12
 2d2:	0e 94 8f 03 	call	0x71e	; 0x71e <__udivmodsi4>
 2d6:	da 01       	movw	r26, r20
 2d8:	c9 01       	movw	r24, r18
 2da:	01 97       	sbiw	r24, 0x01	; 1
 2dc:	a1 09       	sbc	r26, r1
 2de:	b1 09       	sbc	r27, r1
 2e0:	b6 95       	lsr	r27
 2e2:	a7 95       	ror	r26
 2e4:	97 95       	ror	r25
 2e6:	87 95       	ror	r24
 2e8:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
 2ea:	21 15       	cp	r18, r1
 2ec:	80 e1       	ldi	r24, 0x10	; 16
 2ee:	38 07       	cpc	r19, r24
 2f0:	a8 f0       	brcs	.+42     	; 0x31c <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
 2f2:	e8 89       	ldd	r30, Y+16	; 0x10
 2f4:	f9 89       	ldd	r31, Y+17	; 0x11
 2f6:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
 2f8:	60 e8       	ldi	r22, 0x80	; 128
 2fa:	74 e8       	ldi	r23, 0x84	; 132
 2fc:	8e e1       	ldi	r24, 0x1E	; 30
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	a7 01       	movw	r20, r14
 302:	96 01       	movw	r18, r12
 304:	0e 94 8f 03 	call	0x71e	; 0x71e <__udivmodsi4>
 308:	da 01       	movw	r26, r20
 30a:	c9 01       	movw	r24, r18
 30c:	01 97       	sbiw	r24, 0x01	; 1
 30e:	a1 09       	sbc	r26, r1
 310:	b1 09       	sbc	r27, r1
 312:	b6 95       	lsr	r27
 314:	a7 95       	ror	r26
 316:	97 95       	ror	r25
 318:	87 95       	ror	r24
 31a:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
 31c:	ec 85       	ldd	r30, Y+12	; 0x0c
 31e:	fd 85       	ldd	r31, Y+13	; 0x0d
 320:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
 322:	ee 85       	ldd	r30, Y+14	; 0x0e
 324:	ff 85       	ldd	r31, Y+15	; 0x0f
 326:	20 83       	st	Z, r18

  _written = false;
 328:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
 32a:	ec 89       	ldd	r30, Y+20	; 0x14
 32c:	fd 89       	ldd	r31, Y+21	; 0x15
 32e:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
 330:	ea 89       	ldd	r30, Y+18	; 0x12
 332:	fb 89       	ldd	r31, Y+19	; 0x13
 334:	80 81       	ld	r24, Z
 336:	80 61       	ori	r24, 0x10	; 16
 338:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
 33a:	ea 89       	ldd	r30, Y+18	; 0x12
 33c:	fb 89       	ldd	r31, Y+19	; 0x13
 33e:	80 81       	ld	r24, Z
 340:	88 60       	ori	r24, 0x08	; 8
 342:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
 344:	ea 89       	ldd	r30, Y+18	; 0x12
 346:	fb 89       	ldd	r31, Y+19	; 0x13
 348:	80 81       	ld	r24, Z
 34a:	80 68       	ori	r24, 0x80	; 128
 34c:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
 34e:	ea 89       	ldd	r30, Y+18	; 0x12
 350:	fb 89       	ldd	r31, Y+19	; 0x13
 352:	80 81       	ld	r24, Z
 354:	8f 7d       	andi	r24, 0xDF	; 223
 356:	80 83       	st	Z, r24
}
 358:	df 91       	pop	r29
 35a:	cf 91       	pop	r28
 35c:	1f 91       	pop	r17
 35e:	ff 90       	pop	r15
 360:	ef 90       	pop	r14
 362:	df 90       	pop	r13
 364:	cf 90       	pop	r12
 366:	08 95       	ret

00000368 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
 368:	1f 92       	push	r1
 36a:	0f 92       	push	r0
 36c:	0f b6       	in	r0, 0x3f	; 63
 36e:	0f 92       	push	r0
 370:	11 24       	eor	r1, r1
 372:	2f 93       	push	r18
 374:	8f 93       	push	r24
 376:	9f 93       	push	r25
 378:	ef 93       	push	r30
 37a:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
 37c:	e0 91 58 01 	lds	r30, 0x0158	; 0x800158 <__data_end+0x10>
 380:	f0 91 59 01 	lds	r31, 0x0159	; 0x800159 <__data_end+0x11>
 384:	80 81       	ld	r24, Z
 386:	e0 91 5e 01 	lds	r30, 0x015E	; 0x80015e <__data_end+0x16>
 38a:	f0 91 5f 01 	lds	r31, 0x015F	; 0x80015f <__data_end+0x17>
 38e:	82 fd       	sbrc	r24, 2
 390:	12 c0       	rjmp	.+36     	; 0x3b6 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
 392:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
 394:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <__data_end+0x19>
 398:	8f 5f       	subi	r24, 0xFF	; 255
 39a:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
 39c:	20 91 62 01 	lds	r18, 0x0162	; 0x800162 <__data_end+0x1a>
 3a0:	82 17       	cp	r24, r18
 3a2:	51 f0       	breq	.+20     	; 0x3b8 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
 3a4:	e0 91 61 01 	lds	r30, 0x0161	; 0x800161 <__data_end+0x19>
 3a8:	f0 e0       	ldi	r31, 0x00	; 0
 3aa:	e8 5b       	subi	r30, 0xB8	; 184
 3ac:	fe 4f       	sbci	r31, 0xFE	; 254
 3ae:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
 3b0:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <__data_end+0x19>
 3b4:	01 c0       	rjmp	.+2      	; 0x3b8 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
 3b6:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
 3b8:	ff 91       	pop	r31
 3ba:	ef 91       	pop	r30
 3bc:	9f 91       	pop	r25
 3be:	8f 91       	pop	r24
 3c0:	2f 91       	pop	r18
 3c2:	0f 90       	pop	r0
 3c4:	0f be       	out	0x3f, r0	; 63
 3c6:	0f 90       	pop	r0
 3c8:	1f 90       	pop	r1
 3ca:	18 95       	reti

000003cc <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
 3cc:	1f 92       	push	r1
 3ce:	0f 92       	push	r0
 3d0:	0f b6       	in	r0, 0x3f	; 63
 3d2:	0f 92       	push	r0
 3d4:	11 24       	eor	r1, r1
 3d6:	2f 93       	push	r18
 3d8:	3f 93       	push	r19
 3da:	4f 93       	push	r20
 3dc:	5f 93       	push	r21
 3de:	6f 93       	push	r22
 3e0:	7f 93       	push	r23
 3e2:	8f 93       	push	r24
 3e4:	9f 93       	push	r25
 3e6:	af 93       	push	r26
 3e8:	bf 93       	push	r27
 3ea:	ef 93       	push	r30
 3ec:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
 3ee:	88 e4       	ldi	r24, 0x48	; 72
 3f0:	91 e0       	ldi	r25, 0x01	; 1
 3f2:	0e 94 c5 00 	call	0x18a	; 0x18a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
 3f6:	ff 91       	pop	r31
 3f8:	ef 91       	pop	r30
 3fa:	bf 91       	pop	r27
 3fc:	af 91       	pop	r26
 3fe:	9f 91       	pop	r25
 400:	8f 91       	pop	r24
 402:	7f 91       	pop	r23
 404:	6f 91       	pop	r22
 406:	5f 91       	pop	r21
 408:	4f 91       	pop	r20
 40a:	3f 91       	pop	r19
 40c:	2f 91       	pop	r18
 40e:	0f 90       	pop	r0
 410:	0f be       	out	0x3f, r0	; 63
 412:	0f 90       	pop	r0
 414:	1f 90       	pop	r1
 416:	18 95       	reti

00000418 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
 418:	88 e4       	ldi	r24, 0x48	; 72
 41a:	91 e0       	ldi	r25, 0x01	; 1
 41c:	0e 94 7a 00 	call	0xf4	; 0xf4 <_ZN14HardwareSerial9availableEv>
 420:	21 e0       	ldi	r18, 0x01	; 1
 422:	89 2b       	or	r24, r25
 424:	09 f4       	brne	.+2      	; 0x428 <_Z17Serial0_availablev+0x10>
 426:	20 e0       	ldi	r18, 0x00	; 0
}
 428:	82 2f       	mov	r24, r18
 42a:	08 95       	ret

0000042c <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
 42c:	e8 e4       	ldi	r30, 0x48	; 72
 42e:	f1 e0       	ldi	r31, 0x01	; 1
 430:	13 82       	std	Z+3, r1	; 0x03
 432:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
 434:	88 ee       	ldi	r24, 0xE8	; 232
 436:	93 e0       	ldi	r25, 0x03	; 3
 438:	a0 e0       	ldi	r26, 0x00	; 0
 43a:	b0 e0       	ldi	r27, 0x00	; 0
 43c:	84 83       	std	Z+4, r24	; 0x04
 43e:	95 83       	std	Z+5, r25	; 0x05
 440:	a6 83       	std	Z+6, r26	; 0x06
 442:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
 444:	8a e2       	ldi	r24, 0x2A	; 42
 446:	91 e0       	ldi	r25, 0x01	; 1
 448:	91 83       	std	Z+1, r25	; 0x01
 44a:	80 83       	st	Z, r24
 44c:	85 ec       	ldi	r24, 0xC5	; 197
 44e:	90 e0       	ldi	r25, 0x00	; 0
 450:	95 87       	std	Z+13, r25	; 0x0d
 452:	84 87       	std	Z+12, r24	; 0x0c
 454:	84 ec       	ldi	r24, 0xC4	; 196
 456:	90 e0       	ldi	r25, 0x00	; 0
 458:	97 87       	std	Z+15, r25	; 0x0f
 45a:	86 87       	std	Z+14, r24	; 0x0e
 45c:	80 ec       	ldi	r24, 0xC0	; 192
 45e:	90 e0       	ldi	r25, 0x00	; 0
 460:	91 8b       	std	Z+17, r25	; 0x11
 462:	80 8b       	std	Z+16, r24	; 0x10
 464:	81 ec       	ldi	r24, 0xC1	; 193
 466:	90 e0       	ldi	r25, 0x00	; 0
 468:	93 8b       	std	Z+19, r25	; 0x13
 46a:	82 8b       	std	Z+18, r24	; 0x12
 46c:	82 ec       	ldi	r24, 0xC2	; 194
 46e:	90 e0       	ldi	r25, 0x00	; 0
 470:	95 8b       	std	Z+21, r25	; 0x15
 472:	84 8b       	std	Z+20, r24	; 0x14
 474:	86 ec       	ldi	r24, 0xC6	; 198
 476:	90 e0       	ldi	r25, 0x00	; 0
 478:	97 8b       	std	Z+23, r25	; 0x17
 47a:	86 8b       	std	Z+22, r24	; 0x16
 47c:	11 8e       	std	Z+25, r1	; 0x19
 47e:	12 8e       	std	Z+26, r1	; 0x1a
 480:	13 8e       	std	Z+27, r1	; 0x1b
 482:	14 8e       	std	Z+28, r1	; 0x1c
 484:	08 95       	ret

00000486 <initVariant>:
 486:	08 95       	ret

00000488 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
 488:	0e 94 53 03 	call	0x6a6	; 0x6a6 <init>

	initVariant();
 48c:	0e 94 43 02 	call	0x486	; 0x486 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
 490:	0e 94 5f 00 	call	0xbe	; 0xbe <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
 494:	c7 eb       	ldi	r28, 0xB7	; 183
 496:	d0 e0       	ldi	r29, 0x00	; 0
#endif
	
	setup();
    
	for (;;) {
		loop();
 498:	0e 94 6e 00 	call	0xdc	; 0xdc <loop>
		if (serialEventRun) serialEventRun();
 49c:	20 97       	sbiw	r28, 0x00	; 0
 49e:	e1 f3       	breq	.-8      	; 0x498 <main+0x10>
 4a0:	0e 94 b7 00 	call	0x16e	; 0x16e <_Z14serialEventRunv>
 4a4:	f9 cf       	rjmp	.-14     	; 0x498 <main+0x10>

000004a6 <_ZN5Print5writeEPKhj>:
size_t Print::println(const String &s)
{
  size_t n = print(s);
  n += println();
  return n;
}
 4a6:	cf 92       	push	r12
 4a8:	df 92       	push	r13
 4aa:	ef 92       	push	r14
 4ac:	ff 92       	push	r15
 4ae:	0f 93       	push	r16
 4b0:	1f 93       	push	r17
 4b2:	cf 93       	push	r28
 4b4:	df 93       	push	r29
 4b6:	6c 01       	movw	r12, r24
 4b8:	7a 01       	movw	r14, r20
 4ba:	8b 01       	movw	r16, r22
 4bc:	c0 e0       	ldi	r28, 0x00	; 0
 4be:	d0 e0       	ldi	r29, 0x00	; 0
 4c0:	ce 15       	cp	r28, r14
 4c2:	df 05       	cpc	r29, r15
 4c4:	81 f0       	breq	.+32     	; 0x4e6 <_ZN5Print5writeEPKhj+0x40>
 4c6:	d8 01       	movw	r26, r16
 4c8:	6d 91       	ld	r22, X+
 4ca:	8d 01       	movw	r16, r26
 4cc:	d6 01       	movw	r26, r12
 4ce:	ed 91       	ld	r30, X+
 4d0:	fc 91       	ld	r31, X
 4d2:	01 90       	ld	r0, Z+
 4d4:	f0 81       	ld	r31, Z
 4d6:	e0 2d       	mov	r30, r0
 4d8:	c6 01       	movw	r24, r12
 4da:	09 95       	icall
 4dc:	89 2b       	or	r24, r25
 4de:	11 f0       	breq	.+4      	; 0x4e4 <_ZN5Print5writeEPKhj+0x3e>
 4e0:	21 96       	adiw	r28, 0x01	; 1
 4e2:	ee cf       	rjmp	.-36     	; 0x4c0 <_ZN5Print5writeEPKhj+0x1a>
 4e4:	7e 01       	movw	r14, r28
 4e6:	c7 01       	movw	r24, r14
 4e8:	df 91       	pop	r29
 4ea:	cf 91       	pop	r28
 4ec:	1f 91       	pop	r17
 4ee:	0f 91       	pop	r16
 4f0:	ff 90       	pop	r15
 4f2:	ef 90       	pop	r14
 4f4:	df 90       	pop	r13
 4f6:	cf 90       	pop	r12
 4f8:	08 95       	ret

000004fa <_ZN5Print5writeEPKc>:
 4fa:	61 15       	cp	r22, r1
 4fc:	71 05       	cpc	r23, r1
 4fe:	79 f0       	breq	.+30     	; 0x51e <_ZN5Print5writeEPKc+0x24>
 500:	fb 01       	movw	r30, r22
 502:	01 90       	ld	r0, Z+
 504:	00 20       	and	r0, r0
 506:	e9 f7       	brne	.-6      	; 0x502 <_ZN5Print5writeEPKc+0x8>
 508:	31 97       	sbiw	r30, 0x01	; 1
 50a:	af 01       	movw	r20, r30
 50c:	46 1b       	sub	r20, r22
 50e:	57 0b       	sbc	r21, r23
 510:	dc 01       	movw	r26, r24
 512:	ed 91       	ld	r30, X+
 514:	fc 91       	ld	r31, X
 516:	02 80       	ldd	r0, Z+2	; 0x02
 518:	f3 81       	ldd	r31, Z+3	; 0x03
 51a:	e0 2d       	mov	r30, r0
 51c:	09 94       	ijmp
 51e:	80 e0       	ldi	r24, 0x00	; 0
 520:	90 e0       	ldi	r25, 0x00	; 0
 522:	08 95       	ret

00000524 <_ZN5Print7printlnEv>:
 524:	68 e3       	ldi	r22, 0x38	; 56
 526:	71 e0       	ldi	r23, 0x01	; 1
 528:	0c 94 7d 02 	jmp	0x4fa	; 0x4fa <_ZN5Print5writeEPKc>

0000052c <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 52c:	0f 93       	push	r16
 52e:	1f 93       	push	r17
 530:	cf 93       	push	r28
 532:	df 93       	push	r29
 534:	ec 01       	movw	r28, r24
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
 536:	0e 94 7d 02 	call	0x4fa	; 0x4fa <_ZN5Print5writeEPKc>
 53a:	8c 01       	movw	r16, r24
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 53c:	ce 01       	movw	r24, r28
 53e:	0e 94 92 02 	call	0x524	; 0x524 <_ZN5Print7printlnEv>
  return n;
}
 542:	80 0f       	add	r24, r16
 544:	91 1f       	adc	r25, r17
 546:	df 91       	pop	r29
 548:	cf 91       	pop	r28
 54a:	1f 91       	pop	r17
 54c:	0f 91       	pop	r16
 54e:	08 95       	ret

00000550 <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
 550:	1f 92       	push	r1
 552:	0f 92       	push	r0
 554:	0f b6       	in	r0, 0x3f	; 63
 556:	0f 92       	push	r0
 558:	11 24       	eor	r1, r1
 55a:	2f 93       	push	r18
 55c:	3f 93       	push	r19
 55e:	8f 93       	push	r24
 560:	9f 93       	push	r25
 562:	af 93       	push	r26
 564:	bf 93       	push	r27
 566:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <timer0_millis>
 56a:	90 91 e7 01 	lds	r25, 0x01E7	; 0x8001e7 <timer0_millis+0x1>
 56e:	a0 91 e8 01 	lds	r26, 0x01E8	; 0x8001e8 <timer0_millis+0x2>
 572:	b0 91 e9 01 	lds	r27, 0x01E9	; 0x8001e9 <timer0_millis+0x3>
 576:	30 91 e5 01 	lds	r19, 0x01E5	; 0x8001e5 <timer0_fract>
 57a:	23 e0       	ldi	r18, 0x03	; 3
 57c:	23 0f       	add	r18, r19
 57e:	2d 37       	cpi	r18, 0x7D	; 125
 580:	20 f4       	brcc	.+8      	; 0x58a <__vector_16+0x3a>
 582:	01 96       	adiw	r24, 0x01	; 1
 584:	a1 1d       	adc	r26, r1
 586:	b1 1d       	adc	r27, r1
 588:	05 c0       	rjmp	.+10     	; 0x594 <__vector_16+0x44>
 58a:	26 e8       	ldi	r18, 0x86	; 134
 58c:	23 0f       	add	r18, r19
 58e:	02 96       	adiw	r24, 0x02	; 2
 590:	a1 1d       	adc	r26, r1
 592:	b1 1d       	adc	r27, r1
 594:	20 93 e5 01 	sts	0x01E5, r18	; 0x8001e5 <timer0_fract>
 598:	80 93 e6 01 	sts	0x01E6, r24	; 0x8001e6 <timer0_millis>
 59c:	90 93 e7 01 	sts	0x01E7, r25	; 0x8001e7 <timer0_millis+0x1>
 5a0:	a0 93 e8 01 	sts	0x01E8, r26	; 0x8001e8 <timer0_millis+0x2>
 5a4:	b0 93 e9 01 	sts	0x01E9, r27	; 0x8001e9 <timer0_millis+0x3>
 5a8:	80 91 ea 01 	lds	r24, 0x01EA	; 0x8001ea <timer0_overflow_count>
 5ac:	90 91 eb 01 	lds	r25, 0x01EB	; 0x8001eb <timer0_overflow_count+0x1>
 5b0:	a0 91 ec 01 	lds	r26, 0x01EC	; 0x8001ec <timer0_overflow_count+0x2>
 5b4:	b0 91 ed 01 	lds	r27, 0x01ED	; 0x8001ed <timer0_overflow_count+0x3>
 5b8:	01 96       	adiw	r24, 0x01	; 1
 5ba:	a1 1d       	adc	r26, r1
 5bc:	b1 1d       	adc	r27, r1
 5be:	80 93 ea 01 	sts	0x01EA, r24	; 0x8001ea <timer0_overflow_count>
 5c2:	90 93 eb 01 	sts	0x01EB, r25	; 0x8001eb <timer0_overflow_count+0x1>
 5c6:	a0 93 ec 01 	sts	0x01EC, r26	; 0x8001ec <timer0_overflow_count+0x2>
 5ca:	b0 93 ed 01 	sts	0x01ED, r27	; 0x8001ed <timer0_overflow_count+0x3>
 5ce:	bf 91       	pop	r27
 5d0:	af 91       	pop	r26
 5d2:	9f 91       	pop	r25
 5d4:	8f 91       	pop	r24
 5d6:	3f 91       	pop	r19
 5d8:	2f 91       	pop	r18
 5da:	0f 90       	pop	r0
 5dc:	0f be       	out	0x3f, r0	; 63
 5de:	0f 90       	pop	r0
 5e0:	1f 90       	pop	r1
 5e2:	18 95       	reti

000005e4 <micros>:
 5e4:	3f b7       	in	r19, 0x3f	; 63
 5e6:	f8 94       	cli
 5e8:	80 91 ea 01 	lds	r24, 0x01EA	; 0x8001ea <timer0_overflow_count>
 5ec:	90 91 eb 01 	lds	r25, 0x01EB	; 0x8001eb <timer0_overflow_count+0x1>
 5f0:	a0 91 ec 01 	lds	r26, 0x01EC	; 0x8001ec <timer0_overflow_count+0x2>
 5f4:	b0 91 ed 01 	lds	r27, 0x01ED	; 0x8001ed <timer0_overflow_count+0x3>
 5f8:	26 b5       	in	r18, 0x26	; 38
 5fa:	a8 9b       	sbis	0x15, 0	; 21
 5fc:	05 c0       	rjmp	.+10     	; 0x608 <micros+0x24>
 5fe:	2f 3f       	cpi	r18, 0xFF	; 255
 600:	19 f0       	breq	.+6      	; 0x608 <micros+0x24>
 602:	01 96       	adiw	r24, 0x01	; 1
 604:	a1 1d       	adc	r26, r1
 606:	b1 1d       	adc	r27, r1
 608:	3f bf       	out	0x3f, r19	; 63
 60a:	ba 2f       	mov	r27, r26
 60c:	a9 2f       	mov	r26, r25
 60e:	98 2f       	mov	r25, r24
 610:	88 27       	eor	r24, r24
 612:	82 0f       	add	r24, r18
 614:	91 1d       	adc	r25, r1
 616:	a1 1d       	adc	r26, r1
 618:	b1 1d       	adc	r27, r1
 61a:	bc 01       	movw	r22, r24
 61c:	cd 01       	movw	r24, r26
 61e:	42 e0       	ldi	r20, 0x02	; 2
 620:	66 0f       	add	r22, r22
 622:	77 1f       	adc	r23, r23
 624:	88 1f       	adc	r24, r24
 626:	99 1f       	adc	r25, r25
 628:	4a 95       	dec	r20
 62a:	d1 f7       	brne	.-12     	; 0x620 <micros+0x3c>
 62c:	08 95       	ret

0000062e <delay>:
 62e:	8f 92       	push	r8
 630:	9f 92       	push	r9
 632:	af 92       	push	r10
 634:	bf 92       	push	r11
 636:	cf 92       	push	r12
 638:	df 92       	push	r13
 63a:	ef 92       	push	r14
 63c:	ff 92       	push	r15
 63e:	6b 01       	movw	r12, r22
 640:	7c 01       	movw	r14, r24
 642:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <micros>
 646:	4b 01       	movw	r8, r22
 648:	5c 01       	movw	r10, r24
 64a:	c1 14       	cp	r12, r1
 64c:	d1 04       	cpc	r13, r1
 64e:	e1 04       	cpc	r14, r1
 650:	f1 04       	cpc	r15, r1
 652:	01 f1       	breq	.+64     	; 0x694 <delay+0x66>
 654:	0e 94 8e 03 	call	0x71c	; 0x71c <yield>
 658:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <micros>
 65c:	dc 01       	movw	r26, r24
 65e:	cb 01       	movw	r24, r22
 660:	88 19       	sub	r24, r8
 662:	99 09       	sbc	r25, r9
 664:	aa 09       	sbc	r26, r10
 666:	bb 09       	sbc	r27, r11
 668:	88 3e       	cpi	r24, 0xE8	; 232
 66a:	93 40       	sbci	r25, 0x03	; 3
 66c:	a1 05       	cpc	r26, r1
 66e:	b1 05       	cpc	r27, r1
 670:	60 f3       	brcs	.-40     	; 0x64a <delay+0x1c>
 672:	21 e0       	ldi	r18, 0x01	; 1
 674:	c2 1a       	sub	r12, r18
 676:	d1 08       	sbc	r13, r1
 678:	e1 08       	sbc	r14, r1
 67a:	f1 08       	sbc	r15, r1
 67c:	88 ee       	ldi	r24, 0xE8	; 232
 67e:	88 0e       	add	r8, r24
 680:	83 e0       	ldi	r24, 0x03	; 3
 682:	98 1e       	adc	r9, r24
 684:	a1 1c       	adc	r10, r1
 686:	b1 1c       	adc	r11, r1
 688:	c1 14       	cp	r12, r1
 68a:	d1 04       	cpc	r13, r1
 68c:	e1 04       	cpc	r14, r1
 68e:	f1 04       	cpc	r15, r1
 690:	19 f7       	brne	.-58     	; 0x658 <delay+0x2a>
 692:	db cf       	rjmp	.-74     	; 0x64a <delay+0x1c>
 694:	ff 90       	pop	r15
 696:	ef 90       	pop	r14
 698:	df 90       	pop	r13
 69a:	cf 90       	pop	r12
 69c:	bf 90       	pop	r11
 69e:	af 90       	pop	r10
 6a0:	9f 90       	pop	r9
 6a2:	8f 90       	pop	r8
 6a4:	08 95       	ret

000006a6 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 6a6:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 6a8:	84 b5       	in	r24, 0x24	; 36
 6aa:	82 60       	ori	r24, 0x02	; 2
 6ac:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 6ae:	84 b5       	in	r24, 0x24	; 36
 6b0:	81 60       	ori	r24, 0x01	; 1
 6b2:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 6b4:	85 b5       	in	r24, 0x25	; 37
 6b6:	82 60       	ori	r24, 0x02	; 2
 6b8:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 6ba:	85 b5       	in	r24, 0x25	; 37
 6bc:	81 60       	ori	r24, 0x01	; 1
 6be:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 6c0:	ee e6       	ldi	r30, 0x6E	; 110
 6c2:	f0 e0       	ldi	r31, 0x00	; 0
 6c4:	80 81       	ld	r24, Z
 6c6:	81 60       	ori	r24, 0x01	; 1
 6c8:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 6ca:	e1 e8       	ldi	r30, 0x81	; 129
 6cc:	f0 e0       	ldi	r31, 0x00	; 0
 6ce:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 6d0:	80 81       	ld	r24, Z
 6d2:	82 60       	ori	r24, 0x02	; 2
 6d4:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 6d6:	80 81       	ld	r24, Z
 6d8:	81 60       	ori	r24, 0x01	; 1
 6da:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 6dc:	e0 e8       	ldi	r30, 0x80	; 128
 6de:	f0 e0       	ldi	r31, 0x00	; 0
 6e0:	80 81       	ld	r24, Z
 6e2:	81 60       	ori	r24, 0x01	; 1
 6e4:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 6e6:	e1 eb       	ldi	r30, 0xB1	; 177
 6e8:	f0 e0       	ldi	r31, 0x00	; 0
 6ea:	80 81       	ld	r24, Z
 6ec:	84 60       	ori	r24, 0x04	; 4
 6ee:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 6f0:	e0 eb       	ldi	r30, 0xB0	; 176
 6f2:	f0 e0       	ldi	r31, 0x00	; 0
 6f4:	80 81       	ld	r24, Z
 6f6:	81 60       	ori	r24, 0x01	; 1
 6f8:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
 6fa:	ea e7       	ldi	r30, 0x7A	; 122
 6fc:	f0 e0       	ldi	r31, 0x00	; 0
 6fe:	80 81       	ld	r24, Z
 700:	84 60       	ori	r24, 0x04	; 4
 702:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
 704:	80 81       	ld	r24, Z
 706:	82 60       	ori	r24, 0x02	; 2
 708:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
 70a:	80 81       	ld	r24, Z
 70c:	81 60       	ori	r24, 0x01	; 1
 70e:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 710:	80 81       	ld	r24, Z
 712:	80 68       	ori	r24, 0x80	; 128
 714:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 716:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 71a:	08 95       	ret

0000071c <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
 71c:	08 95       	ret

0000071e <__udivmodsi4>:
 71e:	a1 e2       	ldi	r26, 0x21	; 33
 720:	1a 2e       	mov	r1, r26
 722:	aa 1b       	sub	r26, r26
 724:	bb 1b       	sub	r27, r27
 726:	fd 01       	movw	r30, r26
 728:	0d c0       	rjmp	.+26     	; 0x744 <__udivmodsi4_ep>

0000072a <__udivmodsi4_loop>:
 72a:	aa 1f       	adc	r26, r26
 72c:	bb 1f       	adc	r27, r27
 72e:	ee 1f       	adc	r30, r30
 730:	ff 1f       	adc	r31, r31
 732:	a2 17       	cp	r26, r18
 734:	b3 07       	cpc	r27, r19
 736:	e4 07       	cpc	r30, r20
 738:	f5 07       	cpc	r31, r21
 73a:	20 f0       	brcs	.+8      	; 0x744 <__udivmodsi4_ep>
 73c:	a2 1b       	sub	r26, r18
 73e:	b3 0b       	sbc	r27, r19
 740:	e4 0b       	sbc	r30, r20
 742:	f5 0b       	sbc	r31, r21

00000744 <__udivmodsi4_ep>:
 744:	66 1f       	adc	r22, r22
 746:	77 1f       	adc	r23, r23
 748:	88 1f       	adc	r24, r24
 74a:	99 1f       	adc	r25, r25
 74c:	1a 94       	dec	r1
 74e:	69 f7       	brne	.-38     	; 0x72a <__udivmodsi4_loop>
 750:	60 95       	com	r22
 752:	70 95       	com	r23
 754:	80 95       	com	r24
 756:	90 95       	com	r25
 758:	9b 01       	movw	r18, r22
 75a:	ac 01       	movw	r20, r24
 75c:	bd 01       	movw	r22, r26
 75e:	cf 01       	movw	r24, r30
 760:	08 95       	ret

00000762 <__tablejump2__>:
 762:	ee 0f       	add	r30, r30
 764:	ff 1f       	adc	r31, r31
 766:	05 90       	lpm	r0, Z+
 768:	f4 91       	lpm	r31, Z
 76a:	e0 2d       	mov	r30, r0
 76c:	09 94       	ijmp

0000076e <_exit>:
 76e:	f8 94       	cli

00000770 <__stop_program>:
 770:	ff cf       	rjmp	.-2      	; 0x770 <__stop_program>
