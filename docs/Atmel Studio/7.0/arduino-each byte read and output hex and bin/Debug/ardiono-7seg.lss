
ardiono-7seg.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  0000086c  00000900  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000086c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000b4  00800112  00800112  00000912  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000912  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000944  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000250  00000000  00000000  00000984  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000716d  00000000  00000000  00000bd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000016a2  00000000  00000000  00007d41  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000147f  00000000  00000000  000093e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006f4  00000000  00000000  0000a864  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001e30  00000000  00000000  0000af58  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000025ad  00000000  00000000  0000cd88  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000220  00000000  00000000  0000f335  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 35 00 	jmp	0x6a	; 0x6a <__ctors_end>
   4:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  38:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  40:	0c 94 61 03 	jmp	0x6c2	; 0x6c2 <__vector_16>
  44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  48:	0c 94 e4 01 	jmp	0x3c8	; 0x3c8 <__vector_18>
  4c:	0c 94 16 02 	jmp	0x42c	; 0x42c <__vector_19>
  50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>

00000068 <__ctors_start>:
  68:	46 02       	muls	r20, r22

0000006a <__ctors_end>:
  6a:	11 24       	eor	r1, r1
  6c:	1f be       	out	0x3f, r1	; 63
  6e:	cf ef       	ldi	r28, 0xFF	; 255
  70:	d8 e0       	ldi	r29, 0x08	; 8
  72:	de bf       	out	0x3e, r29	; 62
  74:	cd bf       	out	0x3d, r28	; 61

00000076 <__do_copy_data>:
  76:	11 e0       	ldi	r17, 0x01	; 1
  78:	a0 e0       	ldi	r26, 0x00	; 0
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	ec e6       	ldi	r30, 0x6C	; 108
  7e:	f8 e0       	ldi	r31, 0x08	; 8
  80:	02 c0       	rjmp	.+4      	; 0x86 <__do_copy_data+0x10>
  82:	05 90       	lpm	r0, Z+
  84:	0d 92       	st	X+, r0
  86:	a2 31       	cpi	r26, 0x12	; 18
  88:	b1 07       	cpc	r27, r17
  8a:	d9 f7       	brne	.-10     	; 0x82 <__do_copy_data+0xc>

0000008c <__do_clear_bss>:
  8c:	21 e0       	ldi	r18, 0x01	; 1
  8e:	a2 e1       	ldi	r26, 0x12	; 18
  90:	b1 e0       	ldi	r27, 0x01	; 1
  92:	01 c0       	rjmp	.+2      	; 0x96 <.do_clear_bss_start>

00000094 <.do_clear_bss_loop>:
  94:	1d 92       	st	X+, r1

00000096 <.do_clear_bss_start>:
  96:	a6 3c       	cpi	r26, 0xC6	; 198
  98:	b2 07       	cpc	r27, r18
  9a:	e1 f7       	brne	.-8      	; 0x94 <.do_clear_bss_loop>

0000009c <__do_global_ctors>:
  9c:	10 e0       	ldi	r17, 0x00	; 0
  9e:	c5 e3       	ldi	r28, 0x35	; 53
  a0:	d0 e0       	ldi	r29, 0x00	; 0
  a2:	04 c0       	rjmp	.+8      	; 0xac <__do_global_ctors+0x10>
  a4:	21 97       	sbiw	r28, 0x01	; 1
  a6:	fe 01       	movw	r30, r28
  a8:	0e 94 08 04 	call	0x810	; 0x810 <__tablejump2__>
  ac:	c4 33       	cpi	r28, 0x34	; 52
  ae:	d1 07       	cpc	r29, r17
  b0:	c9 f7       	brne	.-14     	; 0xa4 <__do_global_ctors+0x8>
  b2:	0e 94 74 02 	call	0x4e8	; 0x4e8 <main>
  b6:	0c 94 34 04 	jmp	0x868	; 0x868 <_exit>

000000ba <__bad_interrupt>:
  ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <setup>:
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
  be:	26 e0       	ldi	r18, 0x06	; 6
  c0:	40 e8       	ldi	r20, 0x80	; 128
  c2:	55 e2       	ldi	r21, 0x25	; 37
  c4:	60 e0       	ldi	r22, 0x00	; 0
  c6:	70 e0       	ldi	r23, 0x00	; 0
  c8:	80 e2       	ldi	r24, 0x20	; 32
  ca:	91 e0       	ldi	r25, 0x01	; 1
  cc:	0c 94 7f 01 	jmp	0x2fe	; 0x2fe <_ZN14HardwareSerial5beginEmh>

000000d0 <loop>:
	Serial.begin(9600);
}
char my[10];
bool flag=false;
int i=0;
void loop() {
  d0:	cf 93       	push	r28
  d2:	df 93       	push	r29
	
	if (Serial.available()) {
  d4:	80 e2       	ldi	r24, 0x20	; 32
  d6:	91 e0       	ldi	r25, 0x01	; 1
  d8:	0e 94 aa 00 	call	0x154	; 0x154 <_ZN14HardwareSerial9availableEv>
  dc:	89 2b       	or	r24, r25
  de:	f1 f0       	breq	.+60     	; 0x11c <loop+0x4c>
		/* read the most recent byte */
		byteRead = Serial.read();
  e0:	80 e2       	ldi	r24, 0x20	; 32
  e2:	91 e0       	ldi	r25, 0x01	; 1
  e4:	0e 94 c4 00 	call	0x188	; 0x188 <_ZN14HardwareSerial4readEv>
  e8:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <byteRead>
		if(byteRead != (byte) '/'){
  ec:	8f 32       	cpi	r24, 0x2F	; 47
  ee:	79 f0       	breq	.+30     	; 0x10e <loop+0x3e>
			my[i] =(char)byteRead;
  f0:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <__data_end>
  f4:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <__data_end+0x1>
  f8:	f9 01       	movw	r30, r18
  fa:	eb 5e       	subi	r30, 0xEB	; 235
  fc:	fe 4f       	sbci	r31, 0xFE	; 254
  fe:	80 83       	st	Z, r24
			i++;
 100:	2f 5f       	subi	r18, 0xFF	; 255
 102:	3f 4f       	sbci	r19, 0xFF	; 255
 104:	30 93 13 01 	sts	0x0113, r19	; 0x800113 <__data_end+0x1>
 108:	20 93 12 01 	sts	0x0112, r18	; 0x800112 <__data_end>
 10c:	07 c0       	rjmp	.+14     	; 0x11c <loop+0x4c>
			}		else{
					flag=true;
 10e:	81 e0       	ldi	r24, 0x01	; 1
 110:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <flag>
					i=0;
 114:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <__data_end+0x1>
 118:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <__data_end>
					}		
	}	
	
	if (flag==true){
 11c:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <flag>
 120:	88 23       	and	r24, r24
 122:	a9 f0       	breq	.+42     	; 0x14e <loop+0x7e>
		int b=atoi(my);
 124:	85 e1       	ldi	r24, 0x15	; 21
 126:	91 e0       	ldi	r25, 0x01	; 1
 128:	0e 94 0e 04 	call	0x81c	; 0x81c <atoi>
 12c:	ec 01       	movw	r28, r24
		Serial.print(b,BIN);
 12e:	42 e0       	ldi	r20, 0x02	; 2
 130:	50 e0       	ldi	r21, 0x00	; 0
 132:	bc 01       	movw	r22, r24
 134:	80 e2       	ldi	r24, 0x20	; 32
 136:	91 e0       	ldi	r25, 0x01	; 1
 138:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <_ZN5Print5printEii>
		Serial.print(b,HEX);
 13c:	40 e1       	ldi	r20, 0x10	; 16
 13e:	50 e0       	ldi	r21, 0x00	; 0
 140:	be 01       	movw	r22, r28
 142:	80 e2       	ldi	r24, 0x20	; 32
 144:	91 e0       	ldi	r25, 0x01	; 1
 146:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <_ZN5Print5printEii>
		flag=false;
 14a:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <flag>
	}
}
 14e:	df 91       	pop	r29
 150:	cf 91       	pop	r28
 152:	08 95       	ret

00000154 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
 154:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
 156:	91 8d       	ldd	r25, Z+25	; 0x19
 158:	22 8d       	ldd	r18, Z+26	; 0x1a
 15a:	89 2f       	mov	r24, r25
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	80 5c       	subi	r24, 0xC0	; 192
 160:	9f 4f       	sbci	r25, 0xFF	; 255
 162:	82 1b       	sub	r24, r18
 164:	91 09       	sbc	r25, r1
}
 166:	8f 73       	andi	r24, 0x3F	; 63
 168:	99 27       	eor	r25, r25
 16a:	08 95       	ret

0000016c <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
 16c:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
 16e:	91 8d       	ldd	r25, Z+25	; 0x19
 170:	82 8d       	ldd	r24, Z+26	; 0x1a
 172:	98 17       	cp	r25, r24
 174:	31 f0       	breq	.+12     	; 0x182 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
 176:	82 8d       	ldd	r24, Z+26	; 0x1a
 178:	e8 0f       	add	r30, r24
 17a:	f1 1d       	adc	r31, r1
 17c:	85 8d       	ldd	r24, Z+29	; 0x1d
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 182:	8f ef       	ldi	r24, 0xFF	; 255
 184:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
 186:	08 95       	ret

00000188 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
 188:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
 18a:	91 8d       	ldd	r25, Z+25	; 0x19
 18c:	82 8d       	ldd	r24, Z+26	; 0x1a
 18e:	98 17       	cp	r25, r24
 190:	61 f0       	breq	.+24     	; 0x1aa <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
 192:	82 8d       	ldd	r24, Z+26	; 0x1a
 194:	df 01       	movw	r26, r30
 196:	a8 0f       	add	r26, r24
 198:	b1 1d       	adc	r27, r1
 19a:	5d 96       	adiw	r26, 0x1d	; 29
 19c:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
 19e:	92 8d       	ldd	r25, Z+26	; 0x1a
 1a0:	9f 5f       	subi	r25, 0xFF	; 255
 1a2:	9f 73       	andi	r25, 0x3F	; 63
 1a4:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 1aa:	8f ef       	ldi	r24, 0xFF	; 255
 1ac:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
 1ae:	08 95       	ret

000001b0 <_ZN14HardwareSerial17availableForWriteEv>:
{
#if (SERIAL_TX_BUFFER_SIZE>256)
  uint8_t oldSREG = SREG;
  cli();
#endif
  tx_buffer_index_t head = _tx_buffer_head;
 1b0:	fc 01       	movw	r30, r24
 1b2:	53 8d       	ldd	r21, Z+27	; 0x1b
  tx_buffer_index_t tail = _tx_buffer_tail;
 1b4:	44 8d       	ldd	r20, Z+28	; 0x1c
 1b6:	25 2f       	mov	r18, r21
 1b8:	30 e0       	ldi	r19, 0x00	; 0
 1ba:	84 2f       	mov	r24, r20
 1bc:	90 e0       	ldi	r25, 0x00	; 0
#if (SERIAL_TX_BUFFER_SIZE>256)
  SREG = oldSREG;
#endif
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
 1be:	82 1b       	sub	r24, r18
 1c0:	93 0b       	sbc	r25, r19
 1c2:	54 17       	cp	r21, r20
 1c4:	10 f0       	brcs	.+4      	; 0x1ca <_ZN14HardwareSerial17availableForWriteEv+0x1a>
 1c6:	cf 96       	adiw	r24, 0x3f	; 63
 1c8:	08 95       	ret
  return tail - head - 1;
 1ca:	01 97       	sbiw	r24, 0x01	; 1
}
 1cc:	08 95       	ret

000001ce <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
 1ce:	8c e3       	ldi	r24, 0x3C	; 60
 1d0:	92 e0       	ldi	r25, 0x02	; 2
 1d2:	89 2b       	or	r24, r25
 1d4:	49 f0       	breq	.+18     	; 0x1e8 <_Z14serialEventRunv+0x1a>
 1d6:	80 e0       	ldi	r24, 0x00	; 0
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	89 2b       	or	r24, r25
 1dc:	29 f0       	breq	.+10     	; 0x1e8 <_Z14serialEventRunv+0x1a>
 1de:	0e 94 3c 02 	call	0x478	; 0x478 <_Z17Serial0_availablev>
 1e2:	81 11       	cpse	r24, r1
 1e4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
 1e8:	08 95       	ret

000001ea <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
 1ea:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
 1ec:	84 8d       	ldd	r24, Z+28	; 0x1c
 1ee:	df 01       	movw	r26, r30
 1f0:	a8 0f       	add	r26, r24
 1f2:	b1 1d       	adc	r27, r1
 1f4:	a3 5a       	subi	r26, 0xA3	; 163
 1f6:	bf 4f       	sbci	r27, 0xFF	; 255
 1f8:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
 1fa:	84 8d       	ldd	r24, Z+28	; 0x1c
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	01 96       	adiw	r24, 0x01	; 1
 200:	8f 73       	andi	r24, 0x3F	; 63
 202:	99 27       	eor	r25, r25
 204:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
 206:	a6 89       	ldd	r26, Z+22	; 0x16
 208:	b7 89       	ldd	r27, Z+23	; 0x17
 20a:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
 20c:	a0 89       	ldd	r26, Z+16	; 0x10
 20e:	b1 89       	ldd	r27, Z+17	; 0x11
 210:	8c 91       	ld	r24, X
 212:	80 64       	ori	r24, 0x40	; 64
 214:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
 216:	93 8d       	ldd	r25, Z+27	; 0x1b
 218:	84 8d       	ldd	r24, Z+28	; 0x1c
 21a:	98 13       	cpse	r25, r24
 21c:	06 c0       	rjmp	.+12     	; 0x22a <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
 21e:	02 88       	ldd	r0, Z+18	; 0x12
 220:	f3 89       	ldd	r31, Z+19	; 0x13
 222:	e0 2d       	mov	r30, r0
 224:	80 81       	ld	r24, Z
 226:	8f 7d       	andi	r24, 0xDF	; 223
 228:	80 83       	st	Z, r24
 22a:	08 95       	ret

0000022c <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
 22c:	ef 92       	push	r14
 22e:	ff 92       	push	r15
 230:	0f 93       	push	r16
 232:	1f 93       	push	r17
 234:	cf 93       	push	r28
 236:	df 93       	push	r29
 238:	ec 01       	movw	r28, r24
  _written = true;
 23a:	81 e0       	ldi	r24, 0x01	; 1
 23c:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
 23e:	9b 8d       	ldd	r25, Y+27	; 0x1b
 240:	8c 8d       	ldd	r24, Y+28	; 0x1c
 242:	98 13       	cpse	r25, r24
 244:	05 c0       	rjmp	.+10     	; 0x250 <_ZN14HardwareSerial5writeEh+0x24>
 246:	e8 89       	ldd	r30, Y+16	; 0x10
 248:	f9 89       	ldd	r31, Y+17	; 0x11
 24a:	80 81       	ld	r24, Z
 24c:	85 fd       	sbrc	r24, 5
 24e:	24 c0       	rjmp	.+72     	; 0x298 <_ZN14HardwareSerial5writeEh+0x6c>
 250:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
 252:	0b 8d       	ldd	r16, Y+27	; 0x1b
 254:	10 e0       	ldi	r17, 0x00	; 0
 256:	0f 5f       	subi	r16, 0xFF	; 255
 258:	1f 4f       	sbci	r17, 0xFF	; 255
 25a:	0f 73       	andi	r16, 0x3F	; 63
 25c:	11 27       	eor	r17, r17
 25e:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
 260:	8c 8d       	ldd	r24, Y+28	; 0x1c
 262:	e8 12       	cpse	r14, r24
 264:	0c c0       	rjmp	.+24     	; 0x27e <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
 266:	0f b6       	in	r0, 0x3f	; 63
 268:	07 fc       	sbrc	r0, 7
 26a:	fa cf       	rjmp	.-12     	; 0x260 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
 26c:	e8 89       	ldd	r30, Y+16	; 0x10
 26e:	f9 89       	ldd	r31, Y+17	; 0x11
 270:	80 81       	ld	r24, Z
 272:	85 ff       	sbrs	r24, 5
 274:	f5 cf       	rjmp	.-22     	; 0x260 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
 276:	ce 01       	movw	r24, r28
 278:	0e 94 f5 00 	call	0x1ea	; 0x1ea <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
 27c:	f1 cf       	rjmp	.-30     	; 0x260 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
 27e:	8b 8d       	ldd	r24, Y+27	; 0x1b
 280:	fe 01       	movw	r30, r28
 282:	e8 0f       	add	r30, r24
 284:	f1 1d       	adc	r31, r1
 286:	e3 5a       	subi	r30, 0xA3	; 163
 288:	ff 4f       	sbci	r31, 0xFF	; 255
 28a:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
 28c:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
 28e:	ea 89       	ldd	r30, Y+18	; 0x12
 290:	fb 89       	ldd	r31, Y+19	; 0x13
 292:	80 81       	ld	r24, Z
 294:	80 62       	ori	r24, 0x20	; 32
 296:	07 c0       	rjmp	.+14     	; 0x2a6 <_ZN14HardwareSerial5writeEh+0x7a>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
 298:	ee 89       	ldd	r30, Y+22	; 0x16
 29a:	ff 89       	ldd	r31, Y+23	; 0x17
 29c:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
 29e:	e8 89       	ldd	r30, Y+16	; 0x10
 2a0:	f9 89       	ldd	r31, Y+17	; 0x11
 2a2:	80 81       	ld	r24, Z
 2a4:	80 64       	ori	r24, 0x40	; 64
 2a6:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
 2a8:	81 e0       	ldi	r24, 0x01	; 1
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	df 91       	pop	r29
 2ae:	cf 91       	pop	r28
 2b0:	1f 91       	pop	r17
 2b2:	0f 91       	pop	r16
 2b4:	ff 90       	pop	r15
 2b6:	ef 90       	pop	r14
 2b8:	08 95       	ret

000002ba <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
 2ba:	cf 93       	push	r28
 2bc:	df 93       	push	r29
 2be:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
 2c0:	88 8d       	ldd	r24, Y+24	; 0x18
 2c2:	88 23       	and	r24, r24
 2c4:	c9 f0       	breq	.+50     	; 0x2f8 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
 2c6:	ea 89       	ldd	r30, Y+18	; 0x12
 2c8:	fb 89       	ldd	r31, Y+19	; 0x13
 2ca:	80 81       	ld	r24, Z
 2cc:	85 fd       	sbrc	r24, 5
 2ce:	05 c0       	rjmp	.+10     	; 0x2da <_ZN14HardwareSerial5flushEv+0x20>
 2d0:	a8 89       	ldd	r26, Y+16	; 0x10
 2d2:	b9 89       	ldd	r27, Y+17	; 0x11
 2d4:	8c 91       	ld	r24, X
 2d6:	86 fd       	sbrc	r24, 6
 2d8:	0f c0       	rjmp	.+30     	; 0x2f8 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
 2da:	0f b6       	in	r0, 0x3f	; 63
 2dc:	07 fc       	sbrc	r0, 7
 2de:	f5 cf       	rjmp	.-22     	; 0x2ca <_ZN14HardwareSerial5flushEv+0x10>
 2e0:	80 81       	ld	r24, Z
 2e2:	85 ff       	sbrs	r24, 5
 2e4:	f2 cf       	rjmp	.-28     	; 0x2ca <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
 2e6:	a8 89       	ldd	r26, Y+16	; 0x10
 2e8:	b9 89       	ldd	r27, Y+17	; 0x11
 2ea:	8c 91       	ld	r24, X
 2ec:	85 ff       	sbrs	r24, 5
 2ee:	ed cf       	rjmp	.-38     	; 0x2ca <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
 2f0:	ce 01       	movw	r24, r28
 2f2:	0e 94 f5 00 	call	0x1ea	; 0x1ea <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
 2f6:	e7 cf       	rjmp	.-50     	; 0x2c6 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
 2f8:	df 91       	pop	r29
 2fa:	cf 91       	pop	r28
 2fc:	08 95       	ret

000002fe <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
 2fe:	cf 92       	push	r12
 300:	df 92       	push	r13
 302:	ef 92       	push	r14
 304:	ff 92       	push	r15
 306:	1f 93       	push	r17
 308:	cf 93       	push	r28
 30a:	df 93       	push	r29
 30c:	ec 01       	movw	r28, r24
 30e:	6a 01       	movw	r12, r20
 310:	7b 01       	movw	r14, r22
 312:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
 314:	e8 89       	ldd	r30, Y+16	; 0x10
 316:	f9 89       	ldd	r31, Y+17	; 0x11
 318:	82 e0       	ldi	r24, 0x02	; 2
 31a:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
 31c:	41 15       	cp	r20, r1
 31e:	51 4e       	sbci	r21, 0xE1	; 225
 320:	61 05       	cpc	r22, r1
 322:	71 05       	cpc	r23, r1
 324:	b1 f0       	breq	.+44     	; 0x352 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
 326:	60 e0       	ldi	r22, 0x00	; 0
 328:	79 e0       	ldi	r23, 0x09	; 9
 32a:	8d e3       	ldi	r24, 0x3D	; 61
 32c:	90 e0       	ldi	r25, 0x00	; 0
 32e:	a7 01       	movw	r20, r14
 330:	96 01       	movw	r18, r12
 332:	0e 94 e6 03 	call	0x7cc	; 0x7cc <__udivmodsi4>
 336:	da 01       	movw	r26, r20
 338:	c9 01       	movw	r24, r18
 33a:	01 97       	sbiw	r24, 0x01	; 1
 33c:	a1 09       	sbc	r26, r1
 33e:	b1 09       	sbc	r27, r1
 340:	b6 95       	lsr	r27
 342:	a7 95       	ror	r26
 344:	97 95       	ror	r25
 346:	87 95       	ror	r24
 348:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
 34a:	21 15       	cp	r18, r1
 34c:	80 e1       	ldi	r24, 0x10	; 16
 34e:	38 07       	cpc	r19, r24
 350:	a8 f0       	brcs	.+42     	; 0x37c <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
 352:	e8 89       	ldd	r30, Y+16	; 0x10
 354:	f9 89       	ldd	r31, Y+17	; 0x11
 356:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
 358:	60 e8       	ldi	r22, 0x80	; 128
 35a:	74 e8       	ldi	r23, 0x84	; 132
 35c:	8e e1       	ldi	r24, 0x1E	; 30
 35e:	90 e0       	ldi	r25, 0x00	; 0
 360:	a7 01       	movw	r20, r14
 362:	96 01       	movw	r18, r12
 364:	0e 94 e6 03 	call	0x7cc	; 0x7cc <__udivmodsi4>
 368:	da 01       	movw	r26, r20
 36a:	c9 01       	movw	r24, r18
 36c:	01 97       	sbiw	r24, 0x01	; 1
 36e:	a1 09       	sbc	r26, r1
 370:	b1 09       	sbc	r27, r1
 372:	b6 95       	lsr	r27
 374:	a7 95       	ror	r26
 376:	97 95       	ror	r25
 378:	87 95       	ror	r24
 37a:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
 37c:	ec 85       	ldd	r30, Y+12	; 0x0c
 37e:	fd 85       	ldd	r31, Y+13	; 0x0d
 380:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
 382:	ee 85       	ldd	r30, Y+14	; 0x0e
 384:	ff 85       	ldd	r31, Y+15	; 0x0f
 386:	20 83       	st	Z, r18

  _written = false;
 388:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
 38a:	ec 89       	ldd	r30, Y+20	; 0x14
 38c:	fd 89       	ldd	r31, Y+21	; 0x15
 38e:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
 390:	ea 89       	ldd	r30, Y+18	; 0x12
 392:	fb 89       	ldd	r31, Y+19	; 0x13
 394:	80 81       	ld	r24, Z
 396:	80 61       	ori	r24, 0x10	; 16
 398:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
 39a:	ea 89       	ldd	r30, Y+18	; 0x12
 39c:	fb 89       	ldd	r31, Y+19	; 0x13
 39e:	80 81       	ld	r24, Z
 3a0:	88 60       	ori	r24, 0x08	; 8
 3a2:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
 3a4:	ea 89       	ldd	r30, Y+18	; 0x12
 3a6:	fb 89       	ldd	r31, Y+19	; 0x13
 3a8:	80 81       	ld	r24, Z
 3aa:	80 68       	ori	r24, 0x80	; 128
 3ac:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
 3ae:	ea 89       	ldd	r30, Y+18	; 0x12
 3b0:	fb 89       	ldd	r31, Y+19	; 0x13
 3b2:	80 81       	ld	r24, Z
 3b4:	8f 7d       	andi	r24, 0xDF	; 223
 3b6:	80 83       	st	Z, r24
}
 3b8:	df 91       	pop	r29
 3ba:	cf 91       	pop	r28
 3bc:	1f 91       	pop	r17
 3be:	ff 90       	pop	r15
 3c0:	ef 90       	pop	r14
 3c2:	df 90       	pop	r13
 3c4:	cf 90       	pop	r12
 3c6:	08 95       	ret

000003c8 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
 3c8:	1f 92       	push	r1
 3ca:	0f 92       	push	r0
 3cc:	0f b6       	in	r0, 0x3f	; 63
 3ce:	0f 92       	push	r0
 3d0:	11 24       	eor	r1, r1
 3d2:	2f 93       	push	r18
 3d4:	8f 93       	push	r24
 3d6:	9f 93       	push	r25
 3d8:	ef 93       	push	r30
 3da:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
 3dc:	e0 91 30 01 	lds	r30, 0x0130	; 0x800130 <Serial+0x10>
 3e0:	f0 91 31 01 	lds	r31, 0x0131	; 0x800131 <Serial+0x11>
 3e4:	80 81       	ld	r24, Z
 3e6:	e0 91 36 01 	lds	r30, 0x0136	; 0x800136 <Serial+0x16>
 3ea:	f0 91 37 01 	lds	r31, 0x0137	; 0x800137 <Serial+0x17>
 3ee:	82 fd       	sbrc	r24, 2
 3f0:	12 c0       	rjmp	.+36     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
 3f2:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
 3f4:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <Serial+0x19>
 3f8:	8f 5f       	subi	r24, 0xFF	; 255
 3fa:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
 3fc:	20 91 3a 01 	lds	r18, 0x013A	; 0x80013a <Serial+0x1a>
 400:	82 17       	cp	r24, r18
 402:	51 f0       	breq	.+20     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
      _rx_buffer[_rx_buffer_head] = c;
 404:	e0 91 39 01 	lds	r30, 0x0139	; 0x800139 <Serial+0x19>
 408:	f0 e0       	ldi	r31, 0x00	; 0
 40a:	e0 5e       	subi	r30, 0xE0	; 224
 40c:	fe 4f       	sbci	r31, 0xFE	; 254
 40e:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
 410:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <Serial+0x19>
 414:	01 c0       	rjmp	.+2      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
 416:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
 418:	ff 91       	pop	r31
 41a:	ef 91       	pop	r30
 41c:	9f 91       	pop	r25
 41e:	8f 91       	pop	r24
 420:	2f 91       	pop	r18
 422:	0f 90       	pop	r0
 424:	0f be       	out	0x3f, r0	; 63
 426:	0f 90       	pop	r0
 428:	1f 90       	pop	r1
 42a:	18 95       	reti

0000042c <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
 42c:	1f 92       	push	r1
 42e:	0f 92       	push	r0
 430:	0f b6       	in	r0, 0x3f	; 63
 432:	0f 92       	push	r0
 434:	11 24       	eor	r1, r1
 436:	2f 93       	push	r18
 438:	3f 93       	push	r19
 43a:	4f 93       	push	r20
 43c:	5f 93       	push	r21
 43e:	6f 93       	push	r22
 440:	7f 93       	push	r23
 442:	8f 93       	push	r24
 444:	9f 93       	push	r25
 446:	af 93       	push	r26
 448:	bf 93       	push	r27
 44a:	ef 93       	push	r30
 44c:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
 44e:	80 e2       	ldi	r24, 0x20	; 32
 450:	91 e0       	ldi	r25, 0x01	; 1
 452:	0e 94 f5 00 	call	0x1ea	; 0x1ea <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
 456:	ff 91       	pop	r31
 458:	ef 91       	pop	r30
 45a:	bf 91       	pop	r27
 45c:	af 91       	pop	r26
 45e:	9f 91       	pop	r25
 460:	8f 91       	pop	r24
 462:	7f 91       	pop	r23
 464:	6f 91       	pop	r22
 466:	5f 91       	pop	r21
 468:	4f 91       	pop	r20
 46a:	3f 91       	pop	r19
 46c:	2f 91       	pop	r18
 46e:	0f 90       	pop	r0
 470:	0f be       	out	0x3f, r0	; 63
 472:	0f 90       	pop	r0
 474:	1f 90       	pop	r1
 476:	18 95       	reti

00000478 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
 478:	80 e2       	ldi	r24, 0x20	; 32
 47a:	91 e0       	ldi	r25, 0x01	; 1
 47c:	0e 94 aa 00 	call	0x154	; 0x154 <_ZN14HardwareSerial9availableEv>
 480:	21 e0       	ldi	r18, 0x01	; 1
 482:	89 2b       	or	r24, r25
 484:	09 f4       	brne	.+2      	; 0x488 <_Z17Serial0_availablev+0x10>
 486:	20 e0       	ldi	r18, 0x00	; 0
}
 488:	82 2f       	mov	r24, r18
 48a:	08 95       	ret

0000048c <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
 48c:	e0 e2       	ldi	r30, 0x20	; 32
 48e:	f1 e0       	ldi	r31, 0x01	; 1
 490:	13 82       	std	Z+3, r1	; 0x03
 492:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
 494:	88 ee       	ldi	r24, 0xE8	; 232
 496:	93 e0       	ldi	r25, 0x03	; 3
 498:	a0 e0       	ldi	r26, 0x00	; 0
 49a:	b0 e0       	ldi	r27, 0x00	; 0
 49c:	84 83       	std	Z+4, r24	; 0x04
 49e:	95 83       	std	Z+5, r25	; 0x05
 4a0:	a6 83       	std	Z+6, r26	; 0x06
 4a2:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
 4a4:	84 e0       	ldi	r24, 0x04	; 4
 4a6:	91 e0       	ldi	r25, 0x01	; 1
 4a8:	91 83       	std	Z+1, r25	; 0x01
 4aa:	80 83       	st	Z, r24
 4ac:	85 ec       	ldi	r24, 0xC5	; 197
 4ae:	90 e0       	ldi	r25, 0x00	; 0
 4b0:	95 87       	std	Z+13, r25	; 0x0d
 4b2:	84 87       	std	Z+12, r24	; 0x0c
 4b4:	84 ec       	ldi	r24, 0xC4	; 196
 4b6:	90 e0       	ldi	r25, 0x00	; 0
 4b8:	97 87       	std	Z+15, r25	; 0x0f
 4ba:	86 87       	std	Z+14, r24	; 0x0e
 4bc:	80 ec       	ldi	r24, 0xC0	; 192
 4be:	90 e0       	ldi	r25, 0x00	; 0
 4c0:	91 8b       	std	Z+17, r25	; 0x11
 4c2:	80 8b       	std	Z+16, r24	; 0x10
 4c4:	81 ec       	ldi	r24, 0xC1	; 193
 4c6:	90 e0       	ldi	r25, 0x00	; 0
 4c8:	93 8b       	std	Z+19, r25	; 0x13
 4ca:	82 8b       	std	Z+18, r24	; 0x12
 4cc:	82 ec       	ldi	r24, 0xC2	; 194
 4ce:	90 e0       	ldi	r25, 0x00	; 0
 4d0:	95 8b       	std	Z+21, r25	; 0x15
 4d2:	84 8b       	std	Z+20, r24	; 0x14
 4d4:	86 ec       	ldi	r24, 0xC6	; 198
 4d6:	90 e0       	ldi	r25, 0x00	; 0
 4d8:	97 8b       	std	Z+23, r25	; 0x17
 4da:	86 8b       	std	Z+22, r24	; 0x16
 4dc:	11 8e       	std	Z+25, r1	; 0x19
 4de:	12 8e       	std	Z+26, r1	; 0x1a
 4e0:	13 8e       	std	Z+27, r1	; 0x1b
 4e2:	14 8e       	std	Z+28, r1	; 0x1c
 4e4:	08 95       	ret

000004e6 <initVariant>:
 4e6:	08 95       	ret

000004e8 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
 4e8:	0e 94 ab 03 	call	0x756	; 0x756 <init>

	initVariant();
 4ec:	0e 94 73 02 	call	0x4e6	; 0x4e6 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
 4f0:	0e 94 5f 00 	call	0xbe	; 0xbe <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
 4f4:	c7 ee       	ldi	r28, 0xE7	; 231
 4f6:	d0 e0       	ldi	r29, 0x00	; 0
#endif
	
	setup();
    
	for (;;) {
		loop();
 4f8:	0e 94 68 00 	call	0xd0	; 0xd0 <loop>
		if (serialEventRun) serialEventRun();
 4fc:	20 97       	sbiw	r28, 0x00	; 0
 4fe:	e1 f3       	breq	.-8      	; 0x4f8 <main+0x10>
 500:	0e 94 e7 00 	call	0x1ce	; 0x1ce <_Z14serialEventRunv>
 504:	f9 cf       	rjmp	.-14     	; 0x4f8 <main+0x10>

00000506 <_ZN5Print5writeEPKhj>:
size_t Print::println(unsigned long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
 506:	cf 92       	push	r12
 508:	df 92       	push	r13
 50a:	ef 92       	push	r14
 50c:	ff 92       	push	r15
 50e:	0f 93       	push	r16
 510:	1f 93       	push	r17
 512:	cf 93       	push	r28
 514:	df 93       	push	r29
 516:	6c 01       	movw	r12, r24
 518:	7a 01       	movw	r14, r20
 51a:	8b 01       	movw	r16, r22
 51c:	c0 e0       	ldi	r28, 0x00	; 0
 51e:	d0 e0       	ldi	r29, 0x00	; 0
 520:	ce 15       	cp	r28, r14
 522:	df 05       	cpc	r29, r15
 524:	81 f0       	breq	.+32     	; 0x546 <_ZN5Print5writeEPKhj+0x40>
 526:	d8 01       	movw	r26, r16
 528:	6d 91       	ld	r22, X+
 52a:	8d 01       	movw	r16, r26
 52c:	d6 01       	movw	r26, r12
 52e:	ed 91       	ld	r30, X+
 530:	fc 91       	ld	r31, X
 532:	01 90       	ld	r0, Z+
 534:	f0 81       	ld	r31, Z
 536:	e0 2d       	mov	r30, r0
 538:	c6 01       	movw	r24, r12
 53a:	09 95       	icall
 53c:	89 2b       	or	r24, r25
 53e:	11 f0       	breq	.+4      	; 0x544 <_ZN5Print5writeEPKhj+0x3e>
 540:	21 96       	adiw	r28, 0x01	; 1
 542:	ee cf       	rjmp	.-36     	; 0x520 <_ZN5Print5writeEPKhj+0x1a>
 544:	7e 01       	movw	r14, r28
 546:	c7 01       	movw	r24, r14
 548:	df 91       	pop	r29
 54a:	cf 91       	pop	r28
 54c:	1f 91       	pop	r17
 54e:	0f 91       	pop	r16
 550:	ff 90       	pop	r15
 552:	ef 90       	pop	r14
 554:	df 90       	pop	r13
 556:	cf 90       	pop	r12
 558:	08 95       	ret

0000055a <_ZN5Print5writeEPKc>:
 55a:	61 15       	cp	r22, r1
 55c:	71 05       	cpc	r23, r1
 55e:	79 f0       	breq	.+30     	; 0x57e <_ZN5Print5writeEPKc+0x24>
 560:	fb 01       	movw	r30, r22
 562:	01 90       	ld	r0, Z+
 564:	00 20       	and	r0, r0
 566:	e9 f7       	brne	.-6      	; 0x562 <_ZN5Print5writeEPKc+0x8>
 568:	31 97       	sbiw	r30, 0x01	; 1
 56a:	af 01       	movw	r20, r30
 56c:	46 1b       	sub	r20, r22
 56e:	57 0b       	sbc	r21, r23
 570:	dc 01       	movw	r26, r24
 572:	ed 91       	ld	r30, X+
 574:	fc 91       	ld	r31, X
 576:	02 80       	ldd	r0, Z+2	; 0x02
 578:	f3 81       	ldd	r31, Z+3	; 0x03
 57a:	e0 2d       	mov	r30, r0
 57c:	09 94       	ijmp
 57e:	80 e0       	ldi	r24, 0x00	; 0
 580:	90 e0       	ldi	r25, 0x00	; 0
 582:	08 95       	ret

00000584 <_ZN5Print5printEc>:
 584:	dc 01       	movw	r26, r24
 586:	ed 91       	ld	r30, X+
 588:	fc 91       	ld	r31, X
 58a:	01 90       	ld	r0, Z+
 58c:	f0 81       	ld	r31, Z
 58e:	e0 2d       	mov	r30, r0
 590:	09 94       	ijmp

00000592 <_ZN5Print11printNumberEmh>:
 592:	8f 92       	push	r8
 594:	9f 92       	push	r9
 596:	af 92       	push	r10
 598:	bf 92       	push	r11
 59a:	ef 92       	push	r14
 59c:	ff 92       	push	r15
 59e:	0f 93       	push	r16
 5a0:	1f 93       	push	r17
 5a2:	cf 93       	push	r28
 5a4:	df 93       	push	r29
 5a6:	cd b7       	in	r28, 0x3d	; 61
 5a8:	de b7       	in	r29, 0x3e	; 62
 5aa:	a1 97       	sbiw	r28, 0x21	; 33
 5ac:	0f b6       	in	r0, 0x3f	; 63
 5ae:	f8 94       	cli
 5b0:	de bf       	out	0x3e, r29	; 62
 5b2:	0f be       	out	0x3f, r0	; 63
 5b4:	cd bf       	out	0x3d, r28	; 61
 5b6:	7c 01       	movw	r14, r24
 5b8:	fa 01       	movw	r30, r20
 5ba:	cb 01       	movw	r24, r22
 5bc:	19 a2       	std	Y+33, r1	; 0x21
 5be:	22 30       	cpi	r18, 0x02	; 2
 5c0:	08 f4       	brcc	.+2      	; 0x5c4 <_ZN5Print11printNumberEmh+0x32>
 5c2:	2a e0       	ldi	r18, 0x0A	; 10
 5c4:	8e 01       	movw	r16, r28
 5c6:	0f 5d       	subi	r16, 0xDF	; 223
 5c8:	1f 4f       	sbci	r17, 0xFF	; 255
 5ca:	82 2e       	mov	r8, r18
 5cc:	91 2c       	mov	r9, r1
 5ce:	a1 2c       	mov	r10, r1
 5d0:	b1 2c       	mov	r11, r1
 5d2:	bf 01       	movw	r22, r30
 5d4:	a5 01       	movw	r20, r10
 5d6:	94 01       	movw	r18, r8
 5d8:	0e 94 e6 03 	call	0x7cc	; 0x7cc <__udivmodsi4>
 5dc:	f9 01       	movw	r30, r18
 5de:	ca 01       	movw	r24, r20
 5e0:	01 50       	subi	r16, 0x01	; 1
 5e2:	11 09       	sbc	r17, r1
 5e4:	6a 30       	cpi	r22, 0x0A	; 10
 5e6:	10 f4       	brcc	.+4      	; 0x5ec <_ZN5Print11printNumberEmh+0x5a>
 5e8:	60 5d       	subi	r22, 0xD0	; 208
 5ea:	01 c0       	rjmp	.+2      	; 0x5ee <_ZN5Print11printNumberEmh+0x5c>
 5ec:	69 5c       	subi	r22, 0xC9	; 201
 5ee:	d8 01       	movw	r26, r16
 5f0:	6c 93       	st	X, r22
 5f2:	23 2b       	or	r18, r19
 5f4:	24 2b       	or	r18, r20
 5f6:	25 2b       	or	r18, r21
 5f8:	61 f7       	brne	.-40     	; 0x5d2 <_ZN5Print11printNumberEmh+0x40>
 5fa:	b8 01       	movw	r22, r16
 5fc:	c7 01       	movw	r24, r14
 5fe:	0e 94 ad 02 	call	0x55a	; 0x55a <_ZN5Print5writeEPKc>
 602:	a1 96       	adiw	r28, 0x21	; 33
 604:	0f b6       	in	r0, 0x3f	; 63
 606:	f8 94       	cli
 608:	de bf       	out	0x3e, r29	; 62
 60a:	0f be       	out	0x3f, r0	; 63
 60c:	cd bf       	out	0x3d, r28	; 61
 60e:	df 91       	pop	r29
 610:	cf 91       	pop	r28
 612:	1f 91       	pop	r17
 614:	0f 91       	pop	r16
 616:	ff 90       	pop	r15
 618:	ef 90       	pop	r14
 61a:	bf 90       	pop	r11
 61c:	af 90       	pop	r10
 61e:	9f 90       	pop	r9
 620:	8f 90       	pop	r8
 622:	08 95       	ret

00000624 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
 624:	cf 92       	push	r12
 626:	df 92       	push	r13
 628:	ef 92       	push	r14
 62a:	ff 92       	push	r15
 62c:	0f 93       	push	r16
 62e:	1f 93       	push	r17
 630:	cf 93       	push	r28
 632:	df 93       	push	r29
  if (base == 0) {
 634:	21 15       	cp	r18, r1
 636:	31 05       	cpc	r19, r1
 638:	81 f4       	brne	.+32     	; 0x65a <_ZN5Print5printEli+0x36>
    return write(n);
 63a:	dc 01       	movw	r26, r24
 63c:	ed 91       	ld	r30, X+
 63e:	fc 91       	ld	r31, X
 640:	01 90       	ld	r0, Z+
 642:	f0 81       	ld	r31, Z
 644:	e0 2d       	mov	r30, r0
 646:	64 2f       	mov	r22, r20
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 648:	df 91       	pop	r29
 64a:	cf 91       	pop	r28
 64c:	1f 91       	pop	r17
 64e:	0f 91       	pop	r16
 650:	ff 90       	pop	r15
 652:	ef 90       	pop	r14
 654:	df 90       	pop	r13
 656:	cf 90       	pop	r12
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
 658:	09 94       	ijmp
  } else if (base == 10) {
 65a:	2a 30       	cpi	r18, 0x0A	; 10
 65c:	31 05       	cpc	r19, r1
 65e:	01 f5       	brne	.+64     	; 0x6a0 <_ZN5Print5printEli+0x7c>
    if (n < 0) {
 660:	77 ff       	sbrs	r23, 7
 662:	1d c0       	rjmp	.+58     	; 0x69e <_ZN5Print5printEli+0x7a>
 664:	6a 01       	movw	r12, r20
 666:	7b 01       	movw	r14, r22
 668:	ec 01       	movw	r28, r24
      int t = print('-');
 66a:	6d e2       	ldi	r22, 0x2D	; 45
 66c:	0e 94 c2 02 	call	0x584	; 0x584 <_ZN5Print5printEc>
 670:	8c 01       	movw	r16, r24
      n = -n;
      return printNumber(n, 10) + t;
 672:	44 27       	eor	r20, r20
 674:	55 27       	eor	r21, r21
 676:	ba 01       	movw	r22, r20
 678:	4c 19       	sub	r20, r12
 67a:	5d 09       	sbc	r21, r13
 67c:	6e 09       	sbc	r22, r14
 67e:	7f 09       	sbc	r23, r15
 680:	2a e0       	ldi	r18, 0x0A	; 10
 682:	ce 01       	movw	r24, r28
 684:	0e 94 c9 02 	call	0x592	; 0x592 <_ZN5Print11printNumberEmh>
 688:	80 0f       	add	r24, r16
 68a:	91 1f       	adc	r25, r17
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 68c:	df 91       	pop	r29
 68e:	cf 91       	pop	r28
 690:	1f 91       	pop	r17
 692:	0f 91       	pop	r16
 694:	ff 90       	pop	r15
 696:	ef 90       	pop	r14
 698:	df 90       	pop	r13
 69a:	cf 90       	pop	r12
 69c:	08 95       	ret
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
 69e:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
  }
}
 6a0:	df 91       	pop	r29
 6a2:	cf 91       	pop	r28
 6a4:	1f 91       	pop	r17
 6a6:	0f 91       	pop	r16
 6a8:	ff 90       	pop	r15
 6aa:	ef 90       	pop	r14
 6ac:	df 90       	pop	r13
 6ae:	cf 90       	pop	r12
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 6b0:	0c 94 c9 02 	jmp	0x592	; 0x592 <_ZN5Print11printNumberEmh>

000006b4 <_ZN5Print5printEii>:
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
 6b4:	9a 01       	movw	r18, r20
  return print((long) n, base);
 6b6:	ab 01       	movw	r20, r22
 6b8:	77 0f       	add	r23, r23
 6ba:	66 0b       	sbc	r22, r22
 6bc:	77 0b       	sbc	r23, r23
 6be:	0c 94 12 03 	jmp	0x624	; 0x624 <_ZN5Print5printEli>

000006c2 <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
 6c2:	1f 92       	push	r1
 6c4:	0f 92       	push	r0
 6c6:	0f b6       	in	r0, 0x3f	; 63
 6c8:	0f 92       	push	r0
 6ca:	11 24       	eor	r1, r1
 6cc:	2f 93       	push	r18
 6ce:	3f 93       	push	r19
 6d0:	8f 93       	push	r24
 6d2:	9f 93       	push	r25
 6d4:	af 93       	push	r26
 6d6:	bf 93       	push	r27
 6d8:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <timer0_millis>
 6dc:	90 91 bf 01 	lds	r25, 0x01BF	; 0x8001bf <timer0_millis+0x1>
 6e0:	a0 91 c0 01 	lds	r26, 0x01C0	; 0x8001c0 <timer0_millis+0x2>
 6e4:	b0 91 c1 01 	lds	r27, 0x01C1	; 0x8001c1 <timer0_millis+0x3>
 6e8:	30 91 bd 01 	lds	r19, 0x01BD	; 0x8001bd <timer0_fract>
 6ec:	23 e0       	ldi	r18, 0x03	; 3
 6ee:	23 0f       	add	r18, r19
 6f0:	2d 37       	cpi	r18, 0x7D	; 125
 6f2:	20 f4       	brcc	.+8      	; 0x6fc <__vector_16+0x3a>
 6f4:	01 96       	adiw	r24, 0x01	; 1
 6f6:	a1 1d       	adc	r26, r1
 6f8:	b1 1d       	adc	r27, r1
 6fa:	05 c0       	rjmp	.+10     	; 0x706 <__vector_16+0x44>
 6fc:	26 e8       	ldi	r18, 0x86	; 134
 6fe:	23 0f       	add	r18, r19
 700:	02 96       	adiw	r24, 0x02	; 2
 702:	a1 1d       	adc	r26, r1
 704:	b1 1d       	adc	r27, r1
 706:	20 93 bd 01 	sts	0x01BD, r18	; 0x8001bd <timer0_fract>
 70a:	80 93 be 01 	sts	0x01BE, r24	; 0x8001be <timer0_millis>
 70e:	90 93 bf 01 	sts	0x01BF, r25	; 0x8001bf <timer0_millis+0x1>
 712:	a0 93 c0 01 	sts	0x01C0, r26	; 0x8001c0 <timer0_millis+0x2>
 716:	b0 93 c1 01 	sts	0x01C1, r27	; 0x8001c1 <timer0_millis+0x3>
 71a:	80 91 c2 01 	lds	r24, 0x01C2	; 0x8001c2 <timer0_overflow_count>
 71e:	90 91 c3 01 	lds	r25, 0x01C3	; 0x8001c3 <timer0_overflow_count+0x1>
 722:	a0 91 c4 01 	lds	r26, 0x01C4	; 0x8001c4 <timer0_overflow_count+0x2>
 726:	b0 91 c5 01 	lds	r27, 0x01C5	; 0x8001c5 <timer0_overflow_count+0x3>
 72a:	01 96       	adiw	r24, 0x01	; 1
 72c:	a1 1d       	adc	r26, r1
 72e:	b1 1d       	adc	r27, r1
 730:	80 93 c2 01 	sts	0x01C2, r24	; 0x8001c2 <timer0_overflow_count>
 734:	90 93 c3 01 	sts	0x01C3, r25	; 0x8001c3 <timer0_overflow_count+0x1>
 738:	a0 93 c4 01 	sts	0x01C4, r26	; 0x8001c4 <timer0_overflow_count+0x2>
 73c:	b0 93 c5 01 	sts	0x01C5, r27	; 0x8001c5 <timer0_overflow_count+0x3>
 740:	bf 91       	pop	r27
 742:	af 91       	pop	r26
 744:	9f 91       	pop	r25
 746:	8f 91       	pop	r24
 748:	3f 91       	pop	r19
 74a:	2f 91       	pop	r18
 74c:	0f 90       	pop	r0
 74e:	0f be       	out	0x3f, r0	; 63
 750:	0f 90       	pop	r0
 752:	1f 90       	pop	r1
 754:	18 95       	reti

00000756 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 756:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 758:	84 b5       	in	r24, 0x24	; 36
 75a:	82 60       	ori	r24, 0x02	; 2
 75c:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 75e:	84 b5       	in	r24, 0x24	; 36
 760:	81 60       	ori	r24, 0x01	; 1
 762:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 764:	85 b5       	in	r24, 0x25	; 37
 766:	82 60       	ori	r24, 0x02	; 2
 768:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 76a:	85 b5       	in	r24, 0x25	; 37
 76c:	81 60       	ori	r24, 0x01	; 1
 76e:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 770:	ee e6       	ldi	r30, 0x6E	; 110
 772:	f0 e0       	ldi	r31, 0x00	; 0
 774:	80 81       	ld	r24, Z
 776:	81 60       	ori	r24, 0x01	; 1
 778:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 77a:	e1 e8       	ldi	r30, 0x81	; 129
 77c:	f0 e0       	ldi	r31, 0x00	; 0
 77e:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 780:	80 81       	ld	r24, Z
 782:	82 60       	ori	r24, 0x02	; 2
 784:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 786:	80 81       	ld	r24, Z
 788:	81 60       	ori	r24, 0x01	; 1
 78a:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 78c:	e0 e8       	ldi	r30, 0x80	; 128
 78e:	f0 e0       	ldi	r31, 0x00	; 0
 790:	80 81       	ld	r24, Z
 792:	81 60       	ori	r24, 0x01	; 1
 794:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 796:	e1 eb       	ldi	r30, 0xB1	; 177
 798:	f0 e0       	ldi	r31, 0x00	; 0
 79a:	80 81       	ld	r24, Z
 79c:	84 60       	ori	r24, 0x04	; 4
 79e:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 7a0:	e0 eb       	ldi	r30, 0xB0	; 176
 7a2:	f0 e0       	ldi	r31, 0x00	; 0
 7a4:	80 81       	ld	r24, Z
 7a6:	81 60       	ori	r24, 0x01	; 1
 7a8:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
 7aa:	ea e7       	ldi	r30, 0x7A	; 122
 7ac:	f0 e0       	ldi	r31, 0x00	; 0
 7ae:	80 81       	ld	r24, Z
 7b0:	84 60       	ori	r24, 0x04	; 4
 7b2:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
 7b4:	80 81       	ld	r24, Z
 7b6:	82 60       	ori	r24, 0x02	; 2
 7b8:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
 7ba:	80 81       	ld	r24, Z
 7bc:	81 60       	ori	r24, 0x01	; 1
 7be:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 7c0:	80 81       	ld	r24, Z
 7c2:	80 68       	ori	r24, 0x80	; 128
 7c4:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 7c6:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 7ca:	08 95       	ret

000007cc <__udivmodsi4>:
 7cc:	a1 e2       	ldi	r26, 0x21	; 33
 7ce:	1a 2e       	mov	r1, r26
 7d0:	aa 1b       	sub	r26, r26
 7d2:	bb 1b       	sub	r27, r27
 7d4:	fd 01       	movw	r30, r26
 7d6:	0d c0       	rjmp	.+26     	; 0x7f2 <__udivmodsi4_ep>

000007d8 <__udivmodsi4_loop>:
 7d8:	aa 1f       	adc	r26, r26
 7da:	bb 1f       	adc	r27, r27
 7dc:	ee 1f       	adc	r30, r30
 7de:	ff 1f       	adc	r31, r31
 7e0:	a2 17       	cp	r26, r18
 7e2:	b3 07       	cpc	r27, r19
 7e4:	e4 07       	cpc	r30, r20
 7e6:	f5 07       	cpc	r31, r21
 7e8:	20 f0       	brcs	.+8      	; 0x7f2 <__udivmodsi4_ep>
 7ea:	a2 1b       	sub	r26, r18
 7ec:	b3 0b       	sbc	r27, r19
 7ee:	e4 0b       	sbc	r30, r20
 7f0:	f5 0b       	sbc	r31, r21

000007f2 <__udivmodsi4_ep>:
 7f2:	66 1f       	adc	r22, r22
 7f4:	77 1f       	adc	r23, r23
 7f6:	88 1f       	adc	r24, r24
 7f8:	99 1f       	adc	r25, r25
 7fa:	1a 94       	dec	r1
 7fc:	69 f7       	brne	.-38     	; 0x7d8 <__udivmodsi4_loop>
 7fe:	60 95       	com	r22
 800:	70 95       	com	r23
 802:	80 95       	com	r24
 804:	90 95       	com	r25
 806:	9b 01       	movw	r18, r22
 808:	ac 01       	movw	r20, r24
 80a:	bd 01       	movw	r22, r26
 80c:	cf 01       	movw	r24, r30
 80e:	08 95       	ret

00000810 <__tablejump2__>:
 810:	ee 0f       	add	r30, r30
 812:	ff 1f       	adc	r31, r31
 814:	05 90       	lpm	r0, Z+
 816:	f4 91       	lpm	r31, Z
 818:	e0 2d       	mov	r30, r0
 81a:	09 94       	ijmp

0000081c <atoi>:
 81c:	fc 01       	movw	r30, r24
 81e:	88 27       	eor	r24, r24
 820:	99 27       	eor	r25, r25
 822:	e8 94       	clt
 824:	21 91       	ld	r18, Z+
 826:	20 32       	cpi	r18, 0x20	; 32
 828:	e9 f3       	breq	.-6      	; 0x824 <atoi+0x8>
 82a:	29 30       	cpi	r18, 0x09	; 9
 82c:	10 f0       	brcs	.+4      	; 0x832 <atoi+0x16>
 82e:	2e 30       	cpi	r18, 0x0E	; 14
 830:	c8 f3       	brcs	.-14     	; 0x824 <atoi+0x8>
 832:	2b 32       	cpi	r18, 0x2B	; 43
 834:	41 f0       	breq	.+16     	; 0x846 <atoi+0x2a>
 836:	2d 32       	cpi	r18, 0x2D	; 45
 838:	39 f4       	brne	.+14     	; 0x848 <atoi+0x2c>
 83a:	68 94       	set
 83c:	04 c0       	rjmp	.+8      	; 0x846 <atoi+0x2a>
 83e:	0e 94 2c 04 	call	0x858	; 0x858 <__mulhi_const_10>
 842:	82 0f       	add	r24, r18
 844:	91 1d       	adc	r25, r1
 846:	21 91       	ld	r18, Z+
 848:	20 53       	subi	r18, 0x30	; 48
 84a:	2a 30       	cpi	r18, 0x0A	; 10
 84c:	c0 f3       	brcs	.-16     	; 0x83e <atoi+0x22>
 84e:	1e f4       	brtc	.+6      	; 0x856 <atoi+0x3a>
 850:	90 95       	com	r25
 852:	81 95       	neg	r24
 854:	9f 4f       	sbci	r25, 0xFF	; 255
 856:	08 95       	ret

00000858 <__mulhi_const_10>:
 858:	7a e0       	ldi	r23, 0x0A	; 10
 85a:	97 9f       	mul	r25, r23
 85c:	90 2d       	mov	r25, r0
 85e:	87 9f       	mul	r24, r23
 860:	80 2d       	mov	r24, r0
 862:	91 0d       	add	r25, r1
 864:	11 24       	eor	r1, r1
 866:	08 95       	ret

00000868 <_exit>:
 868:	f8 94       	cli

0000086a <__stop_program>:
 86a:	ff cf       	rjmp	.-2      	; 0x86a <__stop_program>
